issueId,body
344944506,this pr does a few things it changes the event subscriber from using time.now to use process clock this avoids issues with the machine changing time and reduces allocations by for each event adds start and finish methods to event so we can record more information adds cpu time idle time and allocations count to eventcc tenderlove
338950762,at present when an uploaded file is assigned to a record via a writer method added by has_one_attached or has_many_attached its persisted to storage immediately for example the following causes an uploaded file in params :avatar to be stored: ruby@user.avatar params :avatar wed like to support validating blobs attached to records but for validations to be effective they ought to prevent invalid files from being stored its of little use to identify an invalid file after its already been shipped off to storage you might use a size validation to limit the cost that a single file can add to your aws bill but if the file is stored before validations run you incur its cost regardless.this pr changes active storage to store attachables assigned to a record after the record is saved rather than immediately to that end it introduces change tracking for active storage attachments when you use a writer method added by has_one_attached or has_many_attached active storage tracks a pending change to the records attachments the change is persisted in the applications database when the record is saved and the attachables involved are uploaded to storage only after the save transaction commits.included are supplementary reorganization and expansion of the attachment apis tests
330295059,make webpacker the default javascript compiler for rails with the following changes webpacker gem is installed by default and webpacker:install is run by the rails application generator action cable channel generators will create es stubs rather than use coffeescript active storage action cable turbolinks and rails-ujs is loaded by a new application.js pack in app/javascript by default unless any of the frameworks have been opted out active storage action cable turbolinks and rails-ujs npm modules are automatically listed as dependencies in the default package.json all the javascript-related auxiliaries for sprockets like compression and uglifying is no longer configured or included by default no javascript stubs will be created by default when using the scaffold generators any more
323235613,is there any way to add a prefix to bucket in amazon s?something like this: rubyclass user applicationrecord has_one_attached avatar prefix user/avatars has_many_attached files prefix user/filesend maybe update sservice method: rubyclass service::sservice service def object_for(key prefix bucket.object(#{prefix}/#{key endend or store prefix with key in database
323160333,"tl;dr my decently sized rails app models controllers is suffering from a continuously increasing slowdown in development mode that makes it hard to work on it each reload of the code takes longer than the previous one with delays increasing to minutes after just a few reloads i have identified a probable cause and its also present on new apps rails new leakyapp no added gems i havent found a solution yet.the issue path and url helpers are packaged into a module and included in controllers and other classes when you reload an app the helper methods in this module are removed and then re-added while doing this ruby needs to remove the methods from each class that includes the module however each reload of the code leaves the old class instances e.g the controller from the previous request etc in memory and thus ruby needs to clean route helpers from an ever increasing amount of classes this gets slow after a while backgroundhello,for the past years ive been coping with an issue that rails feels extremely slow when developing i start the server wait for it to boot up and open the site it takes a minute or two before it loads then i have to make a change to a controller model or other rb file and hit reload in the browser it takes some seconds and the changed page opens just fine however after each following change the reload takes longer and longer after a few rounds its faster to restart the server than to wait for rails to reload the code im often waiting minutes before anything shows up again.at first i thought the issue has something to do with activeadmin a properly slow gem in its own right since it always takes forever to reload if i make any change in the admin area i thought the increasing slowness was just part of the package and i tolerated it for longer than i should have lately though it got so unbearable that i needed to find a solution.so i started profiling opening on page in admin from a cold boot i get this beautiful firegraph::xfdac routes=# ids cs.map c mass.references(c map k k.keys flatten.select k k pry map k k.split(#).last.to_i actiondispatch::request actiondispatch::request actiondispatch::request actiondispatch::request actiondispatch::request actiondispatch::request actiondispatch::request actiondispatch::request actiondispatch::request# the somethingcontroller s are only referenced by some actiondispatch::request s that are hanging around.looking at who is referencing those requests: rbids.map id id,mass.references(mass id to_h somethingcontroller#=> @_request actiondispatch::response#=> @request actiondispatch::http::headers#=> @req actiondispatch::request::session#=> @req actiondispatch::cookies::cookiejar#=> @request actiondispatch::remoteip::getip#=> @req actiondispatch::http::headers#=> @req somethingcontroller#=> @_request actiondispatch::response#=> @request actiondispatch::request::session#=> @req actiondispatch::cookies::cookiejar#=> @request actiondispatch::remoteip::getip#=> @req actiondispatch::http::headers#=> @req somethingcontroller#=> @_request actiondispatch::response#=> @request actiondispatch::request::session#=> @req actiondispatch::cookies::cookiejar#=> @request actiondispatch::remoteip::getip#=> @req }} i investigated all of them in depth via mass.references and couldnt find any top node that held a reference to any object from all the different requests the objects from each request however seem to have slightly cyclical relationships e.g a request holds a session a session holds an env the env holds the session and the request or something like that im not sure if this changes anything they could and should be removed in bulk after a reload.starting the gc manually does nothing.and now im stuck does anyone have an idea what is happening if its perhaps a feature not a bug and how can i fix this so that my reload times go back to around seconds smile:thanks for reading beers steps to reproduce create a new rails app add a few models and controllers add this to any controller def index bla render plain objectspace.each_object(object).select{|o o.class.ancestors.to_s.include?(applicationcontroller map(&:to_s).inspectend rails server and open the endpoint from step make any change in any rb code and reload e.g increment the bla counter see the number of loaded instances of the controller go up and up wonder what can be done about it expected behaviorrails should just keep the latest instance of the controller class in memory not all of them actual behaviorevery reload of the code adds a new controller instance in memory and cleaning url helper methods from all these old controllers takes longer after each reload system configuration rails version ruby version disclaimer*when i say rails does this or rails does that above im using rails as a shorthand for object the issue could easily come from any included gem e.g puma or i might be doing something wrong myself"
319441008,i try to use activestorage to store my images with paperclip in s bucket we can have product/id_image/*.png but with activestorage all is at the root and in the variants folder.any pan to hierarchy this with folder at least one folder by model because brows in ftp with several images is very slow
318379067,in the dog was removed from the rails_welcome.png.now there is only a cat and humans but the puppy was a nice detail
318202397,rails-welcome-new dhh
316031730,fixes a transaction is opened and closed without any queries being run we can safely omit the begin and commit statements as they only exist to modify the connections behaviour inside the transaction this removes the overhead of those statements when saving a record with no changes which makes workarounds like save if changed unnecessary.~this implementation wraps the raw database connection in a proxy which buffers begin_transaction calls and materializes them the next time the connection is used or discards them if end_transaction is called first this approach makes new connection usage inside the adapters behave correctly by default third party adapters can use the begin_transaction / end_transaction apis to opt in to the new behaviour but will still work even if they dont.~this implementation buffers transactions inside the transaction manager and materializes them the next time the connection is used for this to work the adapter needs to guard all connection use with a call to materialize_transactions because of this adapters must opt in to get this new behaviour by implementing supports_lazy_transactions? .if raw_connection is used to get a reference to the underlying database connection the behaviour is disabled and transactions are opened eagerly as we cant know how the connection will be used however when the connection is checked back into the pool we can assume that the application wont use the reference again and reenable lazy transactions this prevents a single raw_connection call from disabling lazy transactions for the lifetime of the connection
314430644,summaryid like to propose a couple of changes documentation to make it more inclusive of trans and non-binary individuals i have changed examples that previously used a users gender to use attributes like favorite_color or subscribed_to_newsletter instead other informationthe rails code of conduct advises to use welcoming and inclusive language and this pr helps the documentation continue to evolve to be in line with the code of conduct
313948308,summarythe current javascript esp es is more popular than coffeescript nowadays so the pr converts them to vanilla javascript with decaffeinate to that i have involved in a project that uses decaffeinate to get rid of coffeescript it just works except for some mistakes on applying decaffeinate suggestions by hand todo convert coffeescript code in markdown files tips pbpaste decaffeinate pbcopy converts coffeescript to javascript in clopboard apply/reject decaffeinate suggestions by hand they are added by decaffeinate convert es syntax to es i.g class
313575620,on rails when compression is enabled which it is by default the actual value being written to the underlying storage is actually bigger than the uncompressed raw value.this is because the marshaled_value instance variable typically gets serialized with the entry object which is then written to the underlying storage essentially double-storing every value once uncompressed once possibly compressed).this regression was introduced in fix incoming
313066684,"in the app im working on ive wished that index_by had a buddy that wouldassign the hash value instead of the key multiple times.enter index_with useful when building a hash from a static list ofsymbols before youd do: rubypost_attributes.map attr_name attr_name public_send(attr_name to_h but now thats a little clearer and faster with: rubypost_attributes.index_with attr_name public_send(attr_name its also useful when you have an enumerable that should be converted to a hash,but you dont want to muddle the code up with the overhead that it takes to createthat hash so before thats: rubyweekdays.each_with_object(hash.new do day intervals intervals day interval.all_day end and now its just: rubyweekdays.index_with interval.all_day its also nice to quickly get a hash with either nil or as the value"
311814194,imageprocessing gem is a wrapper around minimagick and ruby-vips and implements an interface for common image resizing and processing this is the canonical image processing gem recommended in shrine and thats where it developed from the initial implementation was extracted from refile which also implements on-the-fly transformations.some features that imageprocessing gem adds on top of minimagick resizing macros resize_to_limit resize_to_fit resize_to_fill resize_and_pad automatic orientation automatic thumbnail sharpening avoids the complex and inefficient minimagick::image class will use magick cli instead of convert on imagemagick in the near futurehowever maybe the biggest feature of the imageprocessing gem is that it has an alternative implementation that uses libvips libvips is an alternative to imagemagick that can process images very rapidly weve seen up to x faster processing compared to imagemagick).whats great is that the imageprocessing gem provides the same interface for both implementations the macros are named the same and the libvips implementation also does auto orientation and thumbnail sharpening only the operations/options specific to imagemagick/libvips differ the integration provided by this pr should work for both implementations.the pr should maintain almost backwards compatibility there are two incompatibilities users would now have to include the image_processing gem into their gemfiles instead of mini_magick combine_options was removed because imageprocessing::minimagick builds a single convert command so its not needed anymorei know that rails is on feature freeze before the release but i think if we agree we want imageprocessing to be used for active storage its better to get it in now due to the two mentioned backwards incompatibilities.in short active storage relying on imageprocessing means it will have much better minimagick defaults it will get libvips support for free which is a big deal in terms of performance it will get convenient resizing macros that work on both implementations and it means the active storage project will have minimal maintenance in the image processing department
306050758,for multi db applications you always had to create your own rake tasks which made setting up multi db a major pita this pr is part of a many that adds the initial underpinning for supporting multiple databases through the rake db commands im doing this in small prs so that reviewing is easier.this app can be used to test out the features here just clone and use the commands below to play with testing re rake tasks for create migrate drop and dump below are assuming a three-tier database.yml like this: yamldevelopment primary default database multiple_databases_development animals default database multiple_databases_development_animals migrations_paths db/animals_migratetest primary default database multiple_databases_test animals default database multiple_databases_test_animals migrations_paths db/animals_migrate creates internal databaseconfig objects so its easier to pass around the configs we can then ask a databaseconfig for its env or spec or config directly this will come in handy for a larger refactoring im working on ensures when running bin/rails db:create bin/rails db:migrate bin/rails db:drop and bin/rails db:schema|structure:dump that tasks are run for all relevant envs and all databases in that env so given the above config bin/rails db:create will create the dev and test dbs for both primary and animals configs adds new rails db tasks that can perform create/migrate/drop on a specific database in an environment bin/rails db:create:primary or bin/rails db:create:animals bin/rails db:drop:primary or bin/rails db:drop:animals bin/rails db:migrate:primary or bin/rails db:migrate:animals future parts of this work will add more rake task support for multi db as this only does the first major ones add documentation for multi-db three-tier database.yml applications add documentation for the rake tasks refactoring of the connection management to fix the assumption that the config lives directly under development see for more info there on what im talking about eventually porting these to rails commands dealing with rw/ro connection setupscc matthewd tenderlove dhh
303653126,i have a rails api serving a react spa it works perfect but i had to do a modification to use activestorages direct uploads.the problem appears when trying to create a direct upload i.e a blob activestorage::directuploadscontroller will fail with some errors which i believe are expected on a normal app but not on an api controllers these are the errors http origin header didnt match request.base_url cant verify csrf token authenticity. my solution has been to change this line make: class activestorage::directuploadscontroller applicationcontroller i think the problem is solved because my applicationcontroller inherits from actioncontroller::api .if my assumptions are correct shouldnt activestorage controllers inherit from actioncontroller::api or actioncontroller::base depending on config.api_only true
302963128,equality comparisons between dates and times can take some extra time to comprehend i tend to think of a date or time as before or after another date or time but i naturally read and as less than and greater than this change seeks to make date/time comparisons more human readable
299921419,weve been bumping arel in lockstep with ar for some time now every rails release requires a new arel release and arel releases occur specifically for rails releases.were not gaining any maintenance freedom by keeping it as a separate gem while we are paying the costs of coordination.scrolling through shows few notable downstreams that arent also depending on active record so this change doesnt force new dependencies onto the ecosystem at large well release a new version of the arel gem that depends on the new version of activerecord so people will still be able to smoothly upgrade this just means theyll need ar installed but not loaded/required).we have no plans to rename the top level arel constant.---housekeeping x copyright/license x tests integrated x rubocop reformat x nodoc all anything else
298036838,references skipping over to sidestep the symbol_from_string.to_sym.dup bug./cc mtsmfm matthewd
294503770,tenderlove and i worked on this which adds parallel testing to rails applications by default new applications will have parallel testing enabled by default and older applications can add it to their test helper: rubyclass activesupport::testcase parallelize(workers end parallel testing in this implementation utilizes forking processes over threads the reason we tenderlove and eileencodes chose forking processes over threads is forking will be faster with single databases which most applications will use locally using threads is beneficial when tests are io bound but the majority of tests are not io bound note after some experimentation we added a threaded parallelization method as well but forked processes are still the default.if an application doesnt want to use parallel testing they can either remove the parallelize block from the test application or set parallel_workers to or fewer for environments where you want to change the default number of workers from what youve set in your test_helper.rb you can export set an environment variable to change the number of workers used the following will use workers and split the tests into processes. parallel_workers bin/rails test note while parallel testing will work with multiple primary databases it currently doesnt rollback fixtures correctly im actively working on fixing that but decided it was out of scope for this particular feature since fixing it is not a feature of parallel testing but rather a bug inconsistency in how rails is handled the fix for that should be coming shortly parallel testing and multiple primary databases does work with tests if not using fixtures im not sure why i thought this but i just tested it locally again and the fixtures work i think i had a bug in my setup the last time i tested this.if you have multiple databases they can be setup like this in your test_helper.rb rubyclass activesupport::testcase parallelize(workers parallelize_setup do worker create a db w worker runs after processes are forked end parallelize_teardown do worker delete the test databases or other cleanup runs before processes are closed endend to do x documentation x guides x changelogcc tenderlove dhh
287712064,steps to reproduce ensure gem pg is in gemfile bundle update rails s expected behaviorrails server should run actual behavior gems/activerecord-../lib/active_record/connection_adapters/connection_specification.rb::in rescue in spec specified postgresql for database adapter but the gem is not loaded add gem pg to your gemfile and ensure its version is at the minimum required by activerecord gem::loaderror system configuration rails version ruby version the issue appears to be caused by this line
287563753,summarypg is just released and most gemfiles dont restrict its version but the version is checked when connecting to the database which leads to the following error when after bundle update : gem::loaderror cant activate pg already activated pg-.. see also this pg issue for pg was done in commit fa but the pg version constraint was not yet relaxed.the second commit switches the queue_classic repository to an open pull request in order to enable testing on pg im not sure if this is desired so take it a proposal only rails version informationthe patch is now backported to rails and rails so that pg will work together with rails and until these versions are released please add a gem version constraint to the gemfile like: gem pg edit update information about rails and
287529251,steps to reproduce start a new rails project with activerecord add gem postgres to the gemfile bundle start bundle exec rails s visit the root page expected behaviorthe default public page should display actual behavior gem::loaderror cant activate pg already activated pg make sure all dependencies are added to gemfile. it appears that a squiggly version check is made in postgresql_adapter.rb that fails now pg has recently released system configuration rails version ruby version
281901361,before noticed during pair/mob programming sessions with peers thatdespite the speed boosts provided by bootsnap and spring there is anoticeable latency between firing a bin/rails server command and anyfeedback being provided to the console depending on the size of theapplication this lack of feedback can make it seem like something iswrong when rails is simply busy initializing.this change may seem gratuitous but by just printing one line to stdoutwere giving a clear signal to the rails user that their command hasbeen received and that rails is indeed booting it almost imperciptiblymakes rails feel more responsive.sure the code doesnt look very fancy but theres no other appropriateplace i could think of putting it than boot.rb
281484633,steps to reproducecurrently with the activestorage::service api you can only get a link through the url method which for most services gives back a public url that expires in some timeframe it would be very useful if there was a file method that returned the backing file object from the service so that you have more flexibility in how you can expose those files system configuration rails version beta
276391661,steps to reproducewhen two predicates a and b are given to a where clause rails combines them using and which is the expected behavior rubymodel.where(col col to_sql select models from models where models.col and models.col when the clause is negated using where.not rails distributes the not to every predicate before combining them using and why rubymodel.where.not(col col to_sql select models from models where models.col and models.col expected behavior not(a and b not(a or not(b in my example the query should look like: sqlselect models from models where models.col or models.col actual behavior not(a and b not(a and not(b wrong)its worth noting that the correct behavior can still be obtained by writing sql directly: rubymodel.where.not(models.col and models.col to_sql select models from models where not models.col and models.col it makes the construct where.not behave very differently depending on the kind of arguments which are passed to it.the culprit seems to be located here system configuration rails version ruby version mri
274307080,pushing up to get feedback on implementation documentation config in an initializer ruby config/initializers/content_security_policy.rbrails.application.config.content_security_policy do p.default_src self https p.font_src self https data p.img_src self https data p.object_src none p.script_src self https p.style_src self https unsafe_inline specify uri for violation reports p.report_uri csp-violation-report-endpointend report csp violations to a specified uri for further information see the following documentation rails.application.config.content_security_policy_report_only true per controller configuration ruby override policy inlineclass postscontroller applicationcontroller content_security_policy do p p.upgrade_insecure_requests true endend using literal valuesclass postscontroller applicationcontroller content_security_policy do p p.base_uri endend using mixed static and dynamic valuesclass postscontroller applicationcontroller content_security_policy do p p.base_uri self endend
273278207,supports vanilla redis hiredis and redis::distributed supports memcached-like sharding across redises with redis::distributed fault tolerant if the redis server is unavailable no exceptions are raised cache fetches are treated as misses and writes are dropped local cache hot in-memory primary cache within block/middleware scope read_/write_multi support for redis mget/mset use redis::distributed for distributed mget support delete_matched support for redis keys globs. ruby defaults to redis://localhost config.cache_store redis_cache_store supports all common cache store options namespace compress compress_threshold expires_in race_condition_tool and all redis options cache_password rails.application.secrets.redis_cache_password config.cache_store redis_cache_store driver hiredis namespace myapp-cache compress true timeout url redis://:#{cache_password}@myapp-cache supports redis::distributed with multiple hosts config.cache_store redis_cache_store driver hiredis namespace myapp-cache compress true url w redis://myapp-cache redis://myapp-cache redis://myapp-cache redis://myapp-cache redis://myapp-cache redis://myapp-cache or pass a builder block config.cache_store redis_cache_store namespace myapp-cache compress true redis redis.new deployment note take care to use a dedicated redis cache rather than pointing this at your existing redis server it wont cope well with mixed usage patterns and it wont expire cache entries by default.redis cache server setup guide
270845724,summarythis pr is meant to be a placeholder for the activestorage guide.having implemented a service for openstack i have a sense of whats necessary to build a new service and to integrate activestorage into an app.this pr is a work in progress and i hope to gather feedback as the guide comes together.topics x how to attach a file(s to a model x how to remove the attached file x how to link to the attached file x how to implement a download link x how to create variations of an image x how to generate a preview for files other than images x how to upload files directly to a service x how to add support for additional cloud services x how to clean up files during testing use lessons learned in x example how to use direct upload events in a form
266899946,phantomjs was abandoned and chrome headless is seeing a major adoption
261423140,"when puma/puma is merged puma will support the early hints statuscode for sending assets before a request has finished.while the early hints spec is still in draft this pr prepares rails toallowing this status code.if the proxy server supports early hints it will send h pushes to theclient.this pr adds a method for setting early hints link headers via rails,and also automatically sends early hints if supported from the stylesheet_link_tag and the javascript_include_tag .once puma supports early hints the early-hints argument can bepassed to the server to enable this note that for early hints to workin the browser the requirements are a proxy that can handle h,and https.to start the server with early hints enabled pass early-hints to rails s .this has been verified to work with ho puma and rails with chrome.the commit adds a new option to the rails server to enable early hintsfor puma.early hints spec tenderlove who i worked with on this feature---in the screenshot below you can see the pushes from early hints.! screen shot at pm"
259251835,add a mechanism for generating and storing previews images extracted from non-image blobs provide two built-in previewers one that extracts the first frame from a video and one that extracts the first page from a pdf document the video previewer relies on ffmpeg and the pdf previewer relies on mupdf dhh
259040189,summary this generator is used when we want to generate a model which dont need active record as plain old ruby object in almost use cases that i expect its executed through the command as bin/rails g model money no-orm examples bin/rails g model address no-orm pretend create app/models/address.rb invoke test_unit create test/models/address_test.rb bin/rails g poro_model address pretend create app/models/address.rb invoke test_unit create test/models/address_test.rb generated codesthere are so simple but i feel that its troublesome a little to create manually rubyclass addressend rubyrequire test_helperclass addresstest activesupport::testcase test the truth do assert true endend
255404483,steps to reproduceusing actioncable with the redis gem upgraded from to and attempting to broadcast on a channel seems to yield this exception: specified redis for action cable pubsub adapter but the gem is not loaded add gem redis to your gemfile and ensure its version is at the minimum required by action cable). going back to makes ac work again as expected expected behaviorac should work actual behavioran exception is raised indicating the gem is not loaded but it seems to be.going back to makes ac work again as expected system configuration rails version ruby version
250996767,"ive been using active record for two days now and who do you think you are what kind of wizardry do you think youre capable of what gives you the right to do such magical things on my behalf?in any case i love you.yours truly,sam"
247861677,the combination of config/secrets.yml config/secrets.yml.enc and secret_base_key is confusing its not clear what you should be putting in these secrets and whether the secret_base_key is related to the setup in general.this pr will deprecate secrets.yml and instead adopt config/credentials.yml.enc to signify what these secrets are specifically for keeping api keys database passwords and any other integration credentials in one place.this new file is a flat format not divided by environments like secrets.yml has been most of the time these credentials are only relevant in production and if someone does need to have some keys duplicated for different environments it can be done by hand.this leaves us with what to do with secret_base_key for test and development well instead simply derive values for both based off a known constant these secrets are not supposed to withstand any sort of attack in test or development.its only in production and derivative environments like exposed betas where the secret actually needs to be secret so we will birth the new credentials.yml.enc file with secret_key_base set instead on new apps.this change will setup the encrypted credentials along with the new application skeleton because even if you make a mistake and forget your key its only production thats impacted so it wont slow down anyone just getting started with development or test.finally this would leave us with a single rails_master_key for services like heroku to set once this has become the standard they could even ask for this key when its missing on the rails buildkit deploy such that the setup is all smooth.note we will just keep rails.secrets and friends around the rails.application.credentials setup will be a new concurrent approach all new apps would use it but we wouldnt need to screw existing apps.work left x implement config.require_master_key instead of config.read_encrypted_secrets x alert at the end of rails new app that there is a master key what it is and that you should put it in your password manager update all documentation to talk about credentials rather than secrets x update all railties tests to deal with missing secrets.yml and new master.key and credentials.yml.enc
237636694,i couldnt find another issue about this sorry if it has already been addressed)using both rails and rc i get the following message on boot: the pgconn pgresult and pgerror constants are deprecated and will beremoved as of version you should use pg::connection pg::result and pg::error instead respectively.called from app/vendor/bundle/ruby/../gems/activesupport-../lib/active_support/dependencies.rb::in load_dependency my pg version is downgrading to makes the warning go away
237079324,this patch improves the performance of inserting fixtures from o(n to o().previously it would require queries to insert fixtures into one table now it takes only one query per table.disabled on sqlite which doesnt support multiple inserts.some benchmarks: with two tables each with k records time to insert fixtures on mysql:before safter s while k fixtures may sound unrealistic at shopify scale we have hundreds of tables each having up to fixtures in our app this patch dramatically improved the performance of test helper this patch would be especially helpful for those apps who use fixtures(:all i heard its the case for basecamp too). closes matthewd
232248996,therubyracer is a relic it depends on an ancient version of v that has multiple known security vulnerabilities particular this is the equivalent of shipping a dependency to chrome version chrome was released all places that talk about therubyracer or include it in templates should be replaced with mini_racer that depends on the most recent version of v.per
232044881,its extremely common as evidenced by the commit in this pr of rails conversions to set a default value for a class_attribute so lets provide that directly
228724179,key-based cache expiration is an incredibly powerful simple way to do away with the error-ridden ways of manual cache expiration but it can also be highly wasteful and generate lots of cache trash this happens when you have keys which churn at high velocity leaving the abandoned keys to be garbage collected with no hint to the fact that they will never be used again if you cache write volume is high and you turn over your entire cache allowance frequently enough this results in cache trash crowding out less-frequently-accessed-but-still-valid keys which in turn leads to high cache miss rates.we can solve this problem by making the keys stable by separating the explicit version so you can keep a stable key like products and an associated version like instead of the combined projects key weve been using so far this means that no matter how frequently product is touched itll still only write to the same cache key thats the recycling part here.this approach is similar to how http caching works theres a cache key in the form of the url and then theres a version component in form of the etag
224152177,fixes find_each find_in_batches and in_batches apis usually operate on large numbers of records where its preferable not to load them all into memory at once.if the query cache is enabled it will hold onto the query results until the end of the execution context request/job which means the memory used is still proportional to the total number of records these queries are typically not repeated so the query cache isnt desirable here.r matthewd
214798675,in basecamp we often use before_validation callbacks to initialize belongs_to associations like so: rubybelongs_to personbefore_validation self.person current.person belongs_to accountbefore_validation self.account person.account this pr adds a default option to the belongs_to macro to formalize and simplify that pattern the default option adds a before_validation callback that initializes the association with the given lambdas return value its used like this: rubybelongs_to person default current.person belongs_to account default person.account cc dhh
213299296,"summary what is the improvement on my local database k schemas test memory usage m k i use benchmark-memory gem i put the detail data on other information on our production server k schemas save our production real memory usage from about gb to mb why i do this background our production structure is multi-schema we use apartment gem.currently we have about schemas.i found our server will consume a lot of memory about g per puma worker while using active_record to connect to the database code i modified the sql statements inside the load_additional_types method because i found the current sql statement is loading too much postgresql type data from pg_type.but there are a lot of redundant types for active_recordabout pg_type table(a composite type is automatically created for each table in the database to represent the row structure of the table),so if there are a lot of tables in the database especially for multi-schema structure database postgresql will create a lot of records in the pg_type table how to do iti use select distinct to filter them in order to reduce memory bloat.i think active_record doesnt need to be mapped to all these records because we dont have the types name is the same as the tables name.i have two solutions use select distinct because in multi-schema structure there are a lot of redundant data on pg_type use t.typname not in select distinct on table_name table_name from information_schema.tables)for performance considerations i choose to use select distincti test this patch on our production environments it reduce a lot of memory usage.before this patch one worker consumed memory about gb(because records selected from the current sql statement we have about schemas in our database)after this patch one worker just consumed memory about mb(only records selected from the amended sql statement other informationi also use benchmark-memory gem to test on my local environmentsi create two database environments development schemas big schemas) benchmark.memory do x x.report(:normal do y.times do activerecord::base.establish_connection(:big).connection activerecord::base.establish_connection(:development).connection end end x.report(:patch do require active_record_postgresql_adapter_ext y.times do activerecord::base.establish_connection(:big).connection activerecord::base.establish_connection(:development).connection end endx.compare!end result: calculating normal m memsize k retained m objects retained strings retained patch k memsize k retained k objects retained strings retained)comparison patch allocated normal allocated x more it is about times difference"
211969654,summaryadd samesite to the cookies to reinforce the security define lax as a first step strict is also supported but is too strict as its name suggests other information samesite is the new recommended way to keep your website secure it would make the csrf protection obsolete.some links
209899404,def new_cipher openssl::cipher.new(aes--cbc end def cipher(mode data cipher new_cipher.public_send(mode cipher.key key cipher.update(data cipher.final endunauthenticated cbc mode with a constant iv this is not up to the minimum standards of how a modern cryptosystem should be designed please use an authenticated mode gcm or if unavailable derive an authentication key and hmac the ciphertext and generate an unpredictable random iv each and every time an encryption is performed
209153155,after further deliberation and reflecting on how disruptive the proposed change for gemfile->gems.rb/gems.locked is for the comparable gain were going to revert to the original plan of putting package.json in the root i dont love adding to a messy/overloaded root but the pain of patching around this isnt worth it so well live with some scar tissue without scars you havent lived
208987200,this ensures multiple threads inside a transactional test to see consistentdatabase state.when a system test starts puma spins up one thread and capybara spins upanother thread because of this when tests are run the database cannotsee what was inserted into the database on teardown this is becausethere are two threads using two different connections.this change uses the statement cache to lock the threads to using asingle connection id instead of each not being able to see each other.this code only runs in the fixture setup and teardown so it does notaffect real production databases.when a transaction is opened we set lock_thread to thread.current sowe can keep track of which connection the thread is using when werollback the transaction we unlock the thread and then there will be noleft-over data in the database because the transaction will roll backthe correct connections eileen m uchitelle matthew draper cc matthewd
208210489,fixes config/secrets.yml.enc using sekrets to allow storing production app secrets right in source control when running bin/rails secrets:edit the file is decrypted and opened in a tmp file that then gets destroyed after the file is encrypted again and written back to its original location differs sligthly in the proposed first-call experience in that we generate a key instead of asking for it also supports storing the key in config/secrets.yml.key instead of always going the rails_master_key .pending x tests x restricting rails s boot when no decryption key is present x merging encrypted into the standard secrets after decryption
206288762,some ar methods allow raw sql where raw sql is rarely necessary this opens up applications to sql injection vulnerabilities when a developer unwittingly passes params or a model attribute to the ar method.code like this looks innocuous though it actually is an exploitable sql injection vulnerability: rubyclass postscontroller applicationcontroller def index posts posts.order(params :order_by ).limit endend a probably-not-comprehensive list of such dangerous apis can be found at apis should be changed to not allow raw sql in the rare case where raw sql is needed the developer should be forced to acknowledge the risk by using an api whose name indicates the danger.this would be a breaking change though which im assuming would not be acceptable this pr adds an ar config flag that when enabled restricts the arguments that can be passed to previously dangerous ar apis the previous functionality can be accessed using unsafe_raw prefixed apis.these changes take a bit of work so im opening this pr early for discussion so far ive made changes to the pluck order and reorder apis.ill be curious to hear what folks think about the idea im happy to try a different approach if anyone has suggestions but it would be really good to remove some sharp edges from ar
203688645,consider this example that does not use parameterization: rubyclass invitationsmailer applicationmailer def account_invitation(inviter invitee account inviter.account inviter inviter invitee invitee subject inviter.name invited you to their basecamp account.name mail subject subject to invitee.email_address from common_address(inviter reply_to inviter.email_address_with_name end def project_invitation(project inviter invitee account inviter.account project project inviter inviter invitee invitee summarizer projectinvitationsummarizer.new(@project.bucket subject inviter.name.familiar added you to a project in basecamp account.name mail subject subject to invitee.email_address from common_address(inviter reply_to inviter.email_address_with_name end def bulk_project_invitation(projects inviter invitee account inviter.account projects projects.sort_by(&:name inviter inviter invitee invitee subject inviter.name.familiar added you to some new stuff in basecamp account.name mail subject subject to invitee.email_address from common_address(inviter reply_to inviter.email_address_with_name endendinvitationsmailer.account_invitation(david@basecamp.com jason@basecamp.com).deliver_later using parameterized mailers this can be rewritten as: rubyclass invitationsmailer applicationmailer before_action inviter invitee params :inviter params :invitee before_action account params :inviter .account default to invitee.email_address from common_address(@inviter reply_to inviter.email_address_with_name def account_invitation mail subject inviter.name invited you to their basecamp account.name end def project_invitation project params :project summarizer projectinvitationsummarizer.new(@project.bucket mail subject inviter.name.familiar added you to a project in basecamp account.name end def bulk_project_invitation projects params :projects .sort_by(&:name mail subject inviter.name.familiar added you to some new stuff in basecamp account.name endendinvitationsmailer.params(inviter david@basecamp.com invitee jason@basecamp.com).account_invitation.deliver_later thats a big improvement its also fully backwards compatible so you can start to gradually transitionmailers that stand to benefit the most from parameterization one by one and leave the others behind
202266560,erubi offers the following advantages for rails works with rubys enable-frozen-string-literal option has smaller memory footprint does no freedom patching erubis adds a method to kernel has simpler internals file lines of code has an open development model erubis doesnt have a public source control repository or bug tracker is not dead erubis hasnt been updated since erubi is a simplified fork of erubis that contains just theparts that are generally needed which includes the partsthat rails uses the only intentional difference inbehavior is that it does not include support for tagsfor debug output that could be added to the actionview erbhandler if it is desired
200846704,summarythis will change the real_csrf_token method which generates a csrf token and stores it in the session the downsides of the original method the bugs it causes and the steps to reproduce it are well described by zetter in the session cookie is not persistent so it is destroyed when you close the browser therefore next time you open the browser if it has a restore last visited pages feature enabled the page will contain the old token in the body but not in the cookie so if you will submit a form from that page the submit will fail.@zetter has discovered that django uses a separate persistent cookie to deal with that actually they allow you to choose which way to go i use a similar approach other informationi didnt get why the real_csrf_token method accepts a session as a parameter perhaps i need to pass the cookie as well or instead get rid of it.also we might want to parameterize the cookies name
199033099,i wanted to open a discussion forgive me if this isnt the right place about merging the library functionality into rails core attempted to add similar csp functionality but has stalled out in i suggested a static default policy and that turned into a lets write better docs conversation this is entirely separate. secure_headers does much more than csp and is meant to be a heres a place where you configure security for all header-based things including cookies thing maybe it tries to do too much maybe it doesnt the rails default_headers mechanism does not suffice for any non-trivial application csp and x-frame-options are not meant to be static before i go through the motions of spiking out what this would look like i just want to see if this is something that would be agreeable and during the porting process yall can review out anything that is disagreeable if theres anything wrong with the current design of secure_headers thatd be a great place to start features global configs meant to be fairly static or the basis of a dynamic policy e.g api_policy vs the default policy or admin csp vs the default or preview_potentially_breaking_features_to_employees_only vs the default theres a default policy and a set of policies that can be referred to by name api for opting out of a given header or of all headers for a given request api for setting specific x-frame-options values per request grouped policy changes based on specific needs e.g that one page that needs an extra frame-src font-src and form-action that doesnt belong in the global policy see named_overrides and named_appends it validates values via regex it does some light validation on the csp certainly not comprehensive it handles per-content type per-controller per-action per-tag helper configs well an api for overriding a directive an api for appending to a directive joshs minifying code middleware to set everything once there should never be a need to check their string values in the application layer it handles cookie security marking cookies as httponly secure samesite etc why not the api is not clear enough for everyone jeremys suggestion seems more friendly to me it doesnt buy much but im clearly not the right person to have an opinion here smile maybe the code is so awful its painful to try and grok maybe it tries to do too much maybe the way its shoehorned as a library has created some not so desirable code maybe the current mechanisms that are duplicated by secure_headers are actually better even if incomplete how to move forward figure out which parts of secure_headers are terrible/agreeable agree on an api agree on a configuration scheme settle on ua sniffing if any agree on safe defaultsgetting security closer to the framework is always a win and is something githubsecurity is actively working on./cc ptoomey mastahyeti gregose tenderlove arthurnn connorshea nateberkopec jacobbednarz stve
197489316,install ruby in projects with ror xx xxx bundle install is fail:gem::ext::builderror error failed to build gem native extension current directory home/ruby/.rbenv/versions/../lib/ruby/gems/../gems/json-../ext/json/ext/generator/home/ruby/.rbenv/versions/../bin/ruby r siteconf--ivjmjg.rb extconf.rbcreating makefilecurrent directory home/ruby/.rbenv/versions/../lib/ruby/gems/../gems/json-../ext/json/ext/generatormake destdir cleancurrent directory home/ruby/.rbenv/versions/../lib/ruby/gems/../gems/json-../ext/json/ext/generatormake destdir=compiling generator.cgenerator.c in function generate_json:generator.c error rb_cfixnum undeclared first use in this function else if klass rb_cfixnum generator.c note each undeclared identifier is reported only once for each function it appears ingenerator.c error rb_cbignum undeclared first use in this function else if klass rb_cbignum generator.c at top level:cc warning unrecognized command line option wno-self-assigncc warning unrecognized command line option wno-constant-logical-operandcc warning unrecognized command line option wno-parentheses-equalitycc warning unrecognized command line option wno-tautological-comparemakefile generator.omake generator.o make failed exit code gem files will remain installed in home/ruby/.rbenv/versions/../lib/ruby/gems/../gems/json for inspection.results logged to home/ruby/.rbenv/versions/../lib/ruby/gems/../extensions/x_-linux/..-static/json-../gem_make.outan error occurred while installing json and bundler cannot continue.make sure that gem install json v succeeds before bundling
194214207,yarn is good yarn works
194195296,steps to reproduceaccording to the following code running something like this: env=development rake db:create it also tries to create test.i think this is violating the principle of least surprise at a cursory glance this also applies to drop_current which might be even more surprising expected behavioronly development environment is created actual behaviorit tries to create test database too system configurationlatest
193930898,fair warning this is early stage work x make yarn the default for new apps polish the webpacker gem a lot morethis works with
191067539,this issue has been ported from the report at as it can be replicated purely with rails using public api this test passes using rails steps to reproducereproduction script rubybegin require bundler/inlinerescue loaderror e stderr.puts bundler version or later is required please update your bundler raise eendgemfile(true do source gem rails github rails/railsendrequire action_controller/railtieclass testapp rails::application config.root file.dirname(__file secrets.secret_token secret_token secrets.secret_key_base secret_key_base config.logger logger.new($stdout rails.logger config.logger routes.draw do get test#index endendclass testcontroller actioncontroller::base include rails.application.routes.url_helpers def index render plain home end def foo_cookie cookies.encrypted foo endendrequire rails/test_helprequire minitest/autorunclass testcontrollertest actioncontroller::testcase setup do cookies.encrypted foo bar end test accessing cookies directly do get index assert_equal bar cookies.encrypted foo end test accessing helper method do get index assert_equal bar controller.foo_cookie endend
190527688,as discussed in we have decided to remove jquery from default stack and use a vanilla version of the ujs driver named rails-ujs instead.this pull request remove jquery-rails from new applications and provides rails-ujs through action view to do this i had to convert actionview::railtie into an engine ).the new rails-ujs was developed by liudangyi as part of google summer of code all credits for this goes to him and to his mentor pixeltrix
185423029,summarythis will allow the use of custom javascript engines in new apps using the javascript-engine option.there are others javascript engines plugins beyond coffee-rails like babel-rails typescript-rails elm-rails etc
184111030,this add a package.json and the settings needed to get npm nodules integrated in new apps when the yarn option is used e.g rails new blog yarn ).the next changes should be done to finish this x add package.json in new apps when yarn option is passed x run yarn install after bundle install in new apps x add rails-ujs dependency to package.json x add node_modules folder to asset paths x fix existing broken tests x add new tests x changelog
183826765,summarythis change allows you to immediately pinpoint what line of application code is triggering sql queries in the development log rubygem load ms select rubygems from rubygems where rubygems.id limit id app/views/news/_version.html.erb::in now you know that a partial is triggering queries which you may not realize looking at the regular log.it turns this sort of log output: started get news/popular for at processing by newscontroller#popular as html version load ms select versions from versions inner join rubygems on rubygems.id versions.rubygem_id left outer join gem_downloads on gem_downloads.rubygem_id rubygems.id and gem_downloads.version_id where versions.created_at between and and versions.indexed order by gem_downloads.count desc versions.created_at desc limit offset version_id indexed t rubygem load ms select rubygems from rubygems where rubygems.id limit id version load ms select versions from versions where versions.rubygem_id and versions.latest order by versions.position asc limit rubygem_id latest t gemdownload load ms select gem_downloads from gem_downloads where gem_downloads.version_id and gem_downloads.rubygem_id limit version_id rubygem_id into this: started get news/popular for at processing by newscontroller#popular as html version load ms select versions from versions inner join rubygems on rubygems.id versions.rubygem_id left outer join gem_downloads on gem_downloads.rubygem_id rubygems.id and gem_downloads.version_id where versions.created_at between and and versions.indexed order by gem_downloads.count desc versions.created_at desc limit offset version_id indexed t app/views/news/show.html.erb::in app_views_news_show_html_erb rubygem load ms select rubygems from rubygems where rubygems.id limit id app/views/news/_version.html.erb::in app_views_news__version_html_erb version load ms select versions from versions where versions.rubygem_id and versions.latest order by versions.position asc limit rubygem_id latest t app/helpers/application_helper.rb::in gem_info gemdownload load ms select gem_downloads from gem_downloads where gem_downloads.version_id and gem_downloads.rubygem_id limit version_id rubygem_id app/models/version.rb::in downloads_count configuration optionthis pr introduces a new activerecord configuration option called verbose_query_logs which can defaults to false in all environments but will be set to true in new_framework_defaults.rb for new projects.pre-existing rails apps can enable the feature in development.rb with rubyrails.application.configure do config.active_record.verbose_query_logs true end other informationits likely ill need some help if this pr is looked at favorably obviously this may not be something that everybody wants on all the time or by default its a little more noisy than the usual development log although in my mind much more useful to developers i cant work on ar queries anymore without adding this patch into new rails apps im working on.i fully intend to add tests of course but having no experience with rails configuration options or the depths of activerecord i would welcome some guidance there as well./cc sgrif
182321888,summarythis addition will now allow configuring an attribute name for theexisting has_secure_password method this can be useful when one wouldlike to store some secure field as a digest just like a password.this also creates a method authenticate_xxx where xxx isthe configured attribute name on has_secure_password authenticate is now an alias to this method when the attribute name is the defaultpassword
181882850,summary@amatsuda tells us as::multibyte has big unicode table and ruby may have similar feature i investigated and noticed that we can remove the table if we accept following changes supported unicode version will depend on ruby ruby supports unicode ruby supports unicode ruby supports unicode unicode case mappings doesnt work until ruby grapheme doesnt work perfect ruby works perfect we merge this pr well have following benefits reduce memory usage(about m reduce repo/gem size(about m reduce code lines(about lines)ill show you the way i tried to remove the table and why the changes will cause.--- as::multibyte::unicode s features are divided into main groups normalize normalize compose decompose reorder_characters this is public method but probably for compose/decompose only case mapping upcase downcase swapcase pack/unpack grapheme pack_graphemes unpack_graphemes tidy bytes tidy_bytes use unicode database.so let remove them normalizesince ruby has string#unicode_normalize has similar option so it seems that we can simply replace it.(i tried ruby supports unicode and ruby supports as::multibyte::unicode has its own unicode_version but now it depends on rubys version case mappings ruby supports unicode case mappings ruby and dont pack/unpack graphemesince ruby changed its regexp engine we can split grapheme with x/ .(ex ub\u\uc\u\ue\u.scan(/\x/) )~~but its grapheme cluster is not true some tests will fail.~~@nurse fixed on ruby memoryunicode database consume m memory rbrequire active_support/core_ext/string/multibyterequire objspace load unicode database.mb_chars.upcasedb activesupport::multibyte::unicode.send(:database)db_memsize db.instance_variables.map do ivar objectspace.memsize_of(db.instance_variable_get(ivar))end.inject(:+)puts db_memsize db_memsize bytes db_memsize bytes rubys unicode database is smaller than as::multibyte::unicode::unicodedatabase rbrequire objspace load unicode database.unicode_normalizedb_memsize unicodenormalize.constants.map do const objectspace.memsize_of(unicodenormalize.const_get(const))end.inject(:+)puts db_memsize db_memsize bytes db_memsize bytes
180881421,update this pr changed a lot over the course of being open please refer to the documentation or code in master stable to use system tests im really excited to open this initial pr for bringing system/acceptance test support to rails through capybara.the goal of this pr is for rails to take on all the setup that is needed in applications to allow capybara and make system testing default in rails applications.~~ why is the name rails::systemtestcase? ~~~~i chose this name because this was the name dhh indicated he preferred in the rails basecamp long ago im totally open to changing the name but ultimately decided to put it in actionpack with the rails namespace so i could get onto writing code and stop worrying about the name wink:~~ the test framework has been moved it its own gem under the rails name and is now actionsystemtest because the gem expects a module and our test frameworks expect a class for inheritance ive made the gem and module name actionsystemtest and the class for inheriting test code from actionsystemtestcase open to other names as well but the module and class names cant be the same else ruby gets confused. how do i add system tests to my application? by default new applications include a base system test much like integration tests gemfiles generated for new applications will include capybara and the selenium driver.capybaras selenium driver requires some setup by the programmer so ive added a layer between capybara and rails so that rails takes on that work called railsseleniumdriver the default settings are as follows the server is puma because this is rails default the browser is chrome because ff is broken w capybara and selenium right now the default port is and the default screen size is the reason i have chosen chrome as the default browser is because firefox doesnt work out of the box selenium and the current version of firefox dont play nicely together so ive set up the driver to default to chrome but it can easily be switched to using firefox id also like to provide support for safari.instead of requiring the programmer to set up the port browser server etc rails handles that setup and frees up the programmer to work on writing their tests.the rails drivers allow the default configuration to be changed by initializing a new driver ruby config/environments/test.rbconfig.system_testing.driver systemtesting::driveradapters::railsseleniumdriver.new browser firefox) what if i dont want to use selenium? if the programmer wants to use one of capybaras default drivers rather than the provided defaults in rails selenium configuration they can easily change that in the test environment ive provided a shim in rails so setting the capybara driver is simple ive named the class capybaradriver and it gives access to the capybara drivers poltergeist webrick selenium with no setup and rack_test ruby config/environments/test.rbconfig.system_testing.driver poltergeist each of the capybara default drivers that requires a server defaults to puma any of the settings can be changed by initializing a new capbyaradriver object ruby config/environments/test.rbconfig.system_testing.driver systemtesting::driveradapters::capybaradriver.new name poltergeist server webrick) what if im making a new application and dont want system testing at all? its easy to skip system testing files in the app generator or the scaffold generator by running with the skip-system-test flag. what if i already use capybara and dont want to use rails? because rails provides a specific test case name to inherit from you can easily just completely skip the rails version of system testing and use capybara directly. i want to try it out! i made a test app where you can try out system tests in rails w selenium whats next? below is a list of what is done and whats left to do once we sort out naming and other issues ill finish up the items below whats done x generators scaffold individual and application x basic documentation x testing adapter settings this just tests that rails provides options included not that capybara and friends work the assumption is that actual behavior of capybara and friends is tested by themselves rails tests its framework for initializing capybara x configurable driver adapters w railsseleniumdriver being the default x railtie for configuring system test settings x support for screenshots x changelog x fix the railties tests x move to its own gem under the rails name x rails guides x other custom but generic helpers we support at basecamp that wed like to port over especially activejob and actioncable support x testing the custom helpers and assertions x because capybara and the test suite use different threads transactions arent correctly rolled back at the end of the test leaving data behind for years databasecleaner has been used to resolve this problem but its fixable in rails see pr future work support for safari last i checked this wasnt quite ready for prime time)cc dhh georgeclaghorn
178602578,there are more and more people who switching to more modern web framework called phoenix and lots of services is being rewritten to it but still there are lots of services left with rails and switching back and forth while developing and debugging with puts-method leads to annoying moments when there is no io.puts method this pr should fix it
174639174,"amatsuda during his railsconf talk this past year presented abenchmark that showed time.zone.now an active support joint)performing x slower than rubys time.now rails master appears tobe a bit faster than that currently clocking in at x slower than time.now heres the exact benchmark data for that: warming up time.now k i/ms time.zone.now k i/mscalculating time.now m i/s m in s time.zone.now k i/s k in scomparison time.now i/s time.zone.now i/s x slower what if i told you we could make time.zone.now even faster well,thats exactly what this patch accomplishes when creating activesupport::timewithzone objects we try to convert the provided time to be in a utc format allthis patch does is in the method where we convert a provided time toutc check if the provided time is already utc and is a time objectand then return early if that is the case this sidesteps having to continue on,and create a new time object from scratch heres the exact benchmarkdata for my patch: warming up time.now k i/ms time.zone.now k i/mscalculating time.now m i/s m in s time.zone.now k i/s m in scomparison time.now i/s time.zone.now i/s x slower with this patch we go from time.zone.now being x slower than time.now to only being x slower than time.now id obviously love some verification on this patch since these numbers sound pretty interesting this is the benchmark-ips report i have been using while working on this rubyrequire benchmark/ipstime.zone eastern time us canada)benchmark.ips do x x.report(time.now time.now x.report(time.zone.now time.zone.now x.compare!end cc amatsudacc performance folks tenderlove and schneems pretty pretty pretty good"
172835754,blockquote class=twitter-tweet data-lang=en>friends don&#;t let friends use int as a primary key p>&mdash schneems schneems a href a>
171979719,summaryadds the option for specifications such as as json to set the request header for get post etc methods in controller tests.for example post action params as json sets the content-type of the request to application/json .r rafaelfranca
171039524,steps to reproduce create a new rails app run it on a mac with a bad processor expected behaviormy laptop should work fine processes should stay under the something limit that apple set actual behaviorwhen running my rails app on a macbook air with ghz of cpu i know getting a new computer when they release the new pros i have been getting a system ran out of resources cant fork any processes error in all of my applications or they just quietly failed finally i opened activity monitor and was able to find more then fsevent_watch processes running my computer has a maximum of processes total doing a google search i stumbled upon the rb-fsevent gem looking at my gemfile.lock i was able to track it down to the listen gem.im unable to tell if it is an issue with the listen gem itself or fnxs implementation in rails see but it seems like its more likely the implementation is broken suggested fixim unable to tell if it is an issue with the listen gem itself or fnxs implementation in rails see but it seems like its more likely the implementation is broken.i would make sure that the listen gem is opt-in especially on systems with low process limits theres a command that allows you to check this although i forget what it is temporary workaroundif your computer is currently showing a system ran out of resources cant fork any processes error reboot it logging in and out might work but i dont feel like testing that you probably wont be able to save most of your work if your software forks a process in order to save).first removed the listen and spring-watcher-listen gems.then in your environments/development.rb file comment out this line ruby use an evented file watcher to asynchronously detect changes in source code routes locales etc this feature depends on the listen gem config.file_watcher activesupport::eventedfileupdatechecker system configuration rails version :rails ruby version :ruby p
170657798,steps to reproduce console redis-server git clone git@github.com:chrismccord/channelsac.git cd channelsac/rails bundle bundle exec puma e production w next visit and refresh the app multiple times on our hardware we can watch the memory grow unbounded as seen here was after an apparent warm up period where rails appeared to be lazy loading resources but the first several dozen page loads shows oddly high memory growth i wasnt sure if this was lazy loading or puma workers warming up so it may be benign way the memory growth appears to grow unbounded following this high growth period and is never reclaimed expected behaviorthe memory is reclaimed following connection cleanup actual behaviormemory grows with each new connection and is not reclaimed after connections die system configuration rails version :observed on both rails and the stable branch containing this patch version :.. os :ubuntu xlet me know if i can provide more information to help diagnose further
169763553,steps to reproduceduring a test my parameters being sent to the controller method are patch update params params example params below ruby{:id save_and_confirm=>false confirmation confirmer_email=>test@example.com confirmer_first_name=>first name confirmer_last_name=>last name hide_confirmer_name=>false inside the controller the params object is represented as below ruby actioncontroller::parameters confirmation=>{confirmer_email=>test@example.com confirmer_first_name=>first name confirmer_last_name=>last name hide_confirmer_name=>false save_and_confirm=>false id controller=>confirmations action=>update permitted false> notice how all of the values are now strings instead of their respective data typs booleans integers this makes expressions like if params :save_and_confirm always run even when the value is false expected behaviorthe expected behavior should be that all values passed in retain their data types and not be converted to a string rails works like this so the params object should look like ruby actioncontroller::parameters confirmation=>{confirmer_email=>test@example.com confirmer_first_name=>first name confirmer_last_name=>last name hide_confirmer_name=>false save_and_confirm=>false id controller=>confirmations action=>update permitted false actual behaviorall parameters are converted to a string system configuration
169186088,this is a common source of job errors rubyclass project applicationrecord after_create notifyprojectparticipants.perform_later self endclass notifyprojectparticipants applicationjob def perform(project this will explode with a activejob::deserializationerror if the job runs before the insert transaction for the new project completes endend its insidious too because itll often work in development then fail in production when your job queue is really fast and your database might be bogged down.the proper way is of course rubyclass project applicationrecord after_create_commit notifyprojectparticipants.perform_later self end but thats easy to forget so i suggest that we create a new default that disallow jobs from being scheduled within transactions you should be able to turn that off but it would be a better default since it would catch this class for errors for more people before they deploy to production
165566280,summarydue to certain third-party interrupts e.g through rack::timeout its possible a prepared statement is generated in postgresql but never stored in rails since the code was interrupted before storing the statement the counter variable was never incremented even though it was used to generate a prepared statement.next time a prepared statement is tried to be generated the generated name is identical to the previous orphaned prepared statement since the same counter was used this culminates in hundreds of the same prepared statement already exists error as rails is unable to move past this one already-in-use name.this update fixes this problem by using uuid as the prepared-statement name and not relying on the counter
163631158,column arguments are lined up for a given table in schema.rb it is intended as a feature but it can get confusing in git diffs where whitespace are often added for columns with no changes this pr adds a activerecord::schemadumper.standardized_argument_widths false option to avoid that.lets say we have an address table with the following schema rbcreate_table address force cascade do t t.string zipcode limit end adding another column with a longer name would also change the line for zipcode diff t.string zipcode limit t.string zipcode limit t.string extra_information limit and generated schema.rb would now be rbcreate_table address force cascade do t t.string zipcode limit t.string extra_information limit end by setting activerecord::schemadumper.standardized_argument_widths to false we would have the following diff and schema instead diff t.string extra_information limit rbcreate_table address force cascade do t t.string zipcode limit t.string extra_information limit end
163160088,steps to reproducerunning rails upgraded to rails rcdropped and recreated the database.all tests that use jsonb column are failing because column is not being serialized into a hash anymore coming back as a plain string i have been unable to find any information on the internet about this schema.rb file shows that the column is jsonb editi looked at this issue some more it seems that using quotes in the migration script allows the default value to be created in postgres as a string.in rails we had this which allowed the column to be created in postgres correctly without quotes rbclass coolmigration activerecord::migration def change add_column businesses feature_flags jsonb default endend if i run this same migration with rails it creates the default value in postgres as this causes rails to serialize this out into a string if change the migration to rbadd_column businesses feature_flags jsonb default everything works fine expected behaviorpostgres jsonb column should be serialized to hash actual behaviorpostgres jsonb column comes back as a string system configuration rails version rc ruby version
162500573,this is continuation of new syntax for tag helpers avoid positional parameters and support html by default.example usage of tag helpers before rubytag(:br nil true)content_tag(:div content_tag(:p hello world class strong content_tag div class strong do hello world end example usage of tag helpers after rubytag.brtag.div tag.p(hello world class strong tag.div class strong do hello world end
157978619,basically eliminate places that actioncable was holding long-term references to channel classes and applicationcable::connection
157646209,we should now be able to write our data-remote data-confirm xhr wrapping and the few other hooks we rely on using vanilla javascript things have progressed well enough for that this is not a verdict on jquery there are still plenty of other reasons for someone to want to use that but it neednt be part of the default stack any more.//cc sstephenson javan
157533507,steps to reproduce a customer model has accepts_nested_attributes_for phones and has_many phones the phone model has belongs_to customer when creating a customer with phone attributes the validations prevent the number and customer from being created.please see both of these repos rails rails rc works without an issue.if i disable validations in the controller when saving the customer by changing customer.save to customer.save(validate false both models save and work as expected expected behaviorthe customer should be saved the phone should also be saved linked to the customer actual behaviorthe customer and phone fails to save and throws a validation error! screen shot at system configuration rails version rc ruby version
157523625,form_tag and form_for provide two very similiar interfaces to much of the same thing we should unify that usage and subsequent calls to field tags additionally there are several deficiencies with the current helpers that id like to solve at the same time now that we will have a new form method to change defaults with dont set dom id or classes on the form or the fields any more it frequently created duplicate ids and its not used often enough to warrant being a default behavior you can easily add the id or class if need be dont require html tags like class and id to be wrapped in a html key there arent a high likelihood of conflict and it complicates the default cases allow form fields that do not correspond to model attributes this makes it easier to mix and match a form with some fields that correspond to a model and others that will trigger other behaviors like sending a welcome email make remote true the default full-page changes after submissions are rough when using turbolinks a normal redirect will generate a turbolinks.visit call and otherwise theres sjr we could consider having config.action_view.forms_remote_by_default that you could set to false for people going old school).examples ruby passing model post will set scope post set url url_for(@post)form_with(model post do form form.text_field title will reference post.title as normal form.text_area description overwrite post.description if present if not it will still work form.submitendform_with(scope post url posts_path do form form.text_field title post title form.text_area description overwrite post.description or ignore if its not present form.submitend submits title=x&description=yform_with(url different_path class something id specific do form form.text_field title this has is the value of the title form.text_area description class no value has been supplied here form.fields(:permission do fields on/off instead of positional parameters for setting values fields.check_box admin on yes off no end form.select category post::categories blank none form.select author_id person.all.collect p p.name p.id blank pick someone form.submitend theres still a fair amount of design work to deal with especially around the formoptionshelper we should move away from positional parameters entirely and replace them with named ones but we should also try to cut down on needless options and pick better defaults and finally we should simply drop a lot of the overly-specialized select option methods.note for x form_for and form_tag should just be soft deprecations no warnings then we can deprecate with a warning perhaps in rails x
156201029,from my comment on i agree with rafaelfranca.this feature will be mis-used in quite a lot of rails applications suppressing callbacks in this way should be something that the framework actively discourages rather than encourages i have worked with enough live rails applications that arent just simple crud apps to know that this feature is going to cause issues in the long run.from the examples given in the pr this is what i understand it to be doing there is an after_create callback on the comment model which creates new notification objects every time a comment is created this is a pretty traditional callback in rails-land to stop notifications being created you wrap it in a suppress block rubynotification.suppress do code that calls something like comment.createend this problem could just as easily be solved by not having the after_create callback at all as other people have suggested theres two better solutions move the logic of creating the comment sending a notification out to a service class this is the direction the rails community has been headed recently and the choice that i personally would pick regardless of any bdfls quips if its just one place where i care about both creating a comment and sending a notification probably something like commentscontroller have this code rubydef create comment comment.new(comment_params if comment.save notification.create(thing comment etc endend both of these solutions are more preferable to me at least than adding more code to the rails framework which encourages magical behaviour both of the solutions ive provided make it explicit that when the comment is created the notification is created if notification.create isnt called after comment.create then there will be no notifications this is particularly handy in tests when we dont necessarily want to create a comment and a notification together because of tight coupling.consider reverting this feature it is going to cause headaches because it will be misused in rails applications
156101357,keeping important secrets in config/secrets.yml isnt a good idea as all these secrets are stored in plaintext when the file is checked into version control thats a shame the application should be able to store actual secrets that it need to talk to internal and external services.we can get there by providing an additional secrets file under config/secrets.yml.enc along with an interface to both edit and read this file.to edit the file im thinking something like rails secrets:edit please enter the master key xxxxxx rails opens config/secrets.yml.enc in unencrypted form in editor saving the opened file will encrypt the file back into config/secrets.yml.enc to enable servers and services to read this file we can set a single environment variable like rails_master_key.we should ask for this master key if its not available when booting the server if config/secrets.yml.enc is present rails server please enter the master key env rails_master_key is missing xxxx note that config/secrets.yml.enc is in addition to config/secrets.yml we can still use the latter for secrets that arent critical like dev/test secret_base_key then itll become a user-action to add config/secrets.yml.enc which should be created on-demand the first time rails secrets:edit is called at the initiation time the user will be asked to set the master key.the two secrets files should then be merged at runtime with enc taking priority
154839056,action mailer declarative exception handling with rescue_from .follows the same pattern as controllers and jobs exceptions raised in delivery jobs enqueued by deliver_later are also delegated to the mailers rescue_from handlers so you can handle the deserializationerror raised by delivery jobs rubyclass mymailer applicationmailer rescue_from activejob::deserializationerror do end activesupport::rescuable polish add the rescue_with_handler class method so exceptions may be handled at the class level without requiring an instance rationalize exception.cause handling if no handler matches the exception fall back to the handler that matches its cause handle exceptions raised elsewhere pass object to execute the rescue_from handler e.g a method call or a block to instance_exec against a different object defaults to self
154125956,this pr makes postgres adapter generate tables using bigserial type for primary keys there are no performance implications by doing this and it should be fully backwards compatible.also see tenderlove pvh schneems hone
153294472,it is a common pattern in the rails community that when people want touse any kind of helper that is defined inside app/helpers they includesthe helper module inside the controller like: module userhelper def my_user_helper endendclass userscontroller applicationcontroller include userhelper def index render inline my_user_helper endend this has problem because the helper cant access anything that isdefined in the view level context class.also all public methods of the helper become available in the controllerwhat can lead to undesirable methods being routed and behaving asactions.also if you helper depends on other helpers or even action view helpersyou need to include each one of these dependencies in your controllerotherwise your helper is not going to work.we already have a helpers proxy at controller class level but that proxydoesnt have access to the instance variables defined in thecontroller.with this new instance level helper proxy users can reuse helpers in thecontroller without having to include the modules and with access toinstance variables defined in the controller. class userscontroller applicationcontroller def index render inline helpers.my_user_helper endend
137771212,hi all i ran into some inconsistency with controller parsing nested params steps to reproduce rubypost params items brand name apple id color pink brand name samsung id color gold what appears in controller{items=> {brand=>{name=>samsung id color=>pink id color=>gold system configuration rails version beta current master) ruby version oddly enough the gist fails on earlier versions of rails too stable stable while our production app works fine on could anyone please tell me what im missing and where is the best place to start looking for params being processed in a controller action thanks
133389678,this pull request is related to issue guys can test it using this script
133309604,"hey guys,when i tried to permit params that contains an array of array strong parameters permit is ignoring the second array and returning an empty array.example controller params.permit(param param attr op val sent parameters param param attr op val rails will ignore the nested arrays and will return only the param"
130646247,while playing with rails beta ive run into a problem with foreign keys and generated models.i have two models rubyclass gateway applicationrecord belongs_to siteendclass site applicationrecord has_many gatewaysend i wanted to use postgres and uuid primary keys for this so i followed the examples at and enabled uuid primary keys in my config/application.rb as follows rubyconfig.generators do g g.orm active_record primary_key_type uuidend the generated migrations looked like this rubyclass enableuuidextension activerecord::migration def change enable_extension uuid-ossp endendclass createsites activerecord::migration def change create_table sites id uuid do t t.string name t.timestamps end endendclass creategateways activerecord::migration def change create_table gateways id uuid do t t.string name t.string ip_address t.references site foreign_key true t.timestamps end endend when running the final migration to create the gateways table i get this error message rails db:migrate creategateways migrating create_table(:gateways id=>:uuid})rails aborted!standarderror an error has occurred this and all later migrations canceled:pg::datatypemismatch error foreign key constraint fk_rails_acd cannot be implementeddetail key columns site_id and id are of incompatible types integer and uuid create table gateways id uuid default uuid_generate_v primary key name character varying ip_address character varying site_id integer created_at timestamp not null updated_at timestamp not null constraint fk_rails_acdforeign key site_id references sites id users/steve/heroku/guru-api/db/migrate/_create_gateways.rb::in change/users/steve/heroku/guru-api/bin/rails::in require/users/steve/heroku/guru-api/bin/rails::in top required)>/users/steve/heroku/guru-api/bin/spring::in top required)>bin/rails::in loadbin/rails::in main>activerecord::statementinvalid pg::datatypemismatch error foreign key constraint fk_rails_acd cannot be implementeddetail key columns site_id and id are of incompatible types integer and uuid create table gateways id uuid default uuid_generate_v primary key name character varying ip_address character varying site_id integer created_at timestamp not null updated_at timestamp not null constraint fk_rails_acdforeign key site_id references sites id))/users/steve/heroku/guru-api/db/migrate/_create_gateways.rb::in change/users/steve/heroku/guru-api/bin/rails::in require/users/steve/heroku/guru-api/bin/rails::in top required)>/users/steve/heroku/guru-api/bin/spring::in top required)>bin/rails::in loadbin/rails::in main>pg::datatypemismatch error foreign key constraint fk_rails_acd cannot be implementeddetail key columns site_id and id are of incompatible types integer and uuid./users/steve/heroku/guru-api/db/migrate/_create_gateways.rb::in change/users/steve/heroku/guru-api/bin/rails::in require/users/steve/heroku/guru-api/bin/rails::in top required)>/users/steve/heroku/guru-api/bin/spring::in top required)>bin/rails::in loadbin/rails::in main>tasks top db:migrate(see full trace by running task with trace) it looks to me like the model generator is not checking to see what type of primary key is set on the referenced model so its assuming incorrectly in this case that it will be an integer type.ive dumped my basic app into a public github repo here you need me to do anything else to help diagnose this let me know
130266733,while hunting the performance problem on our app i noticed literally hundreds of ar#present calls.its true that most of if model.present can be replaced with if model which means the app code is wrong in the most cases but many rails programmers tend to write model.present especially if they are not very much familiar with ruby.i bet git grep ing your rails app youll find at least or occurrences of model.present e.g current_user.present? ).this method call does not only make the code looking a little bit redundant but actually makes so many extra method calls.heres the recorded stack trace of model.present on current ar master this is what exactly happens when calling model.present before this patch: object#present?object#blank?activerecord::attributemethods#respond_to?activemodel::attributemethods#respond_to?kernel#respond_to?kernel#respond_to_missing?kernel#respond_to?kernel#respond_to_missing?symbol#to_sactivemodel::attributemethods#matched_attribute_methodkernel#classactivemodel::attributemethods::classmethods#attribute_method_matchers_matchingactivemodel::attributemethods::classmethods#attribute_method_matchers_cacheconcurrent::collection::mrimapbackend#compute_if_absentconcurrent::collection::nonconcurrentmapbackend# mutex#synchronizeconcurrent::collection::nonconcurrentmapbackend#compute_if_absenthash#fetch##attribute_method_matcherssymbol#to_procenumerable#partitionarray#eachactivemodel::attributemethods::classmethods::attributemethodmatcher#plain?activemodel::attributemethods::classmethods::attributemethodmatcher#plain?activemodel::attributemethods::classmethods::attributemethodmatcher#plain?activemodel::attributemethods::classmethods::attributemethodmatcher#plain?activemodel::attributemethods::classmethods::attributemethodmatcher#plain?activemodel::attributemethods::classmethods::attributemethodmatcher#plain?activemodel::attributemethods::classmethods::attributemethodmatcher#plain?activemodel::attributemethods::classmethods::attributemethodmatcher#plain?activemodel::attributemethods::classmethods::attributemethodmatcher#plain?activemodel::attributemethods::classmethods::attributemethodmatcher#plain?activemodel::attributemethods::classmethods::attributemethodmatcher#plain?activemodel::attributemethods::classmethods::attributemethodmatcher#plain?array#reversearray#flattenarray#mapactivemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~activemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~activemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~activemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~##newstruct#initializeactivemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~activemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~activemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~activemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~activemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~activemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~activemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~activemodel::attributemethods::classmethods::attributemethodmatcher#matchregexp#=~##newstruct#initializearray#compactenumerable#detectarray#eachactivemodel::attributemethods::classmethods::attributemethodmatcher::attributemethodmatch#attr_nameactiverecord::attributemethods::primarykey#attribute_method?activerecord::attributemethods#attribute_method?activerecord::attributeset#key?activerecord::lazyattributehash#key?hash#key?hash#key?hash#key?activemodel::attributemethods::classmethods::attributemethodmatcher::attributemethodmatch#attr_nameactiverecord::attributemethods::primarykey#attribute_method?activerecord::attributemethods#attribute_method?activerecord::attributeset#key?activerecord::lazyattributehash#key?hash#key?hash#key?hash#key?nilclass#nil? so im proposing a new module representing models presence obviously if theres an instance the model should be present.this patch bypasses these method calls scanning through all attributes in favor of simple method call after this patch: activemodel::presence#present? (im sorry if this dups i thought i once saw a similar proposal somewhere but i couldnt find one in the past prs/issues in this repo
128332810,ive started to play with actioncable and realized that we dont have any tools for cable testing.here is a kind of scratch of what as i think cable testing could be.this test helper only deals with transmissions just like activejobs one example rubytest message broadcasting block style do assert_transmissions messages:#{@hello_msg.id}:comments do commentrelayjob.perform_now(@hello_comment endend more examples can be found here there are some questions to discuss how to unit test channels do we need such testing at all
127706644,implement the features outlined in x add support for defining custom url helpers in routes.rb x add support for defining custom polymorphic mappings in routes.rb
125433761,i am running the rails beta and after deploying to production have noticed something odd my application is running being an nginx reverse proxy which decrypts ssl.every time i try to submit a form a actioncontroller::invalidauthenticitytoken is raised i have managed to narrow this down to line in actioncontroller the problem is that the request origin has as the protocol and the request base_url has as the protocol i have tried setting the x-forwarded-proto header and using config.force_ssl true but neither made any difference i have not yet figured out a way to isolate a failing test case but am happy to look into it if anyone has any suggestions
124767565,this pull request adds support for specifying comments for database objects in migrations storing them inside database and dumping them into db/schema.rb file for postgresql and mysql rubycreate_table pages force cascade comment arbitrary content pages do t t.string path comment path fragment of page url used for routing t.string locale comment rfc locale code of website language section t.index locale path name page_uri_index comment main index used to lookup page by its uri t.text content comment html code of page end in my opinion it is really useful feature allowing people to create documented data model right from rails migrations new people can look for tables columns and indexes meaning right in db/schema.rb or right in model files with gems like ctrans annotate_models and dba can view that information directly from mysql workbench pgadmin iii dbeaver or anything else afterwards any existing data modelling tool can be used to generate data model documentation such as er diagrams and table structure automatically with minimal editing.for example in my work recently was situation when we were need to send documentation to customer and database schema was part of it we lost a day helping writers to make this docs as we explained tables and table columns meaning only in our internal wiki and it was incomplete because everyone always forgets to edit it when writing a migration and writers came to us with autogenerated docs from our staging database and there was a lot of manual docs merging and investigation.among built in adapters only postgresql and mysql supports it sqlite does not also oracle_enhanced adapter supports comments with exactly same syntax actually i follow its syntax may be rsim yahonda or cdinger will also review and say whether i should change something for ease of integration of oracle_enhanced implementation with my implementation.comment implementation in rdbms differs heavily postgresql have only separate comment command to set or delete comments on any database objects like oracle and have no syntax to specify comments at time of creation or modification object see docs mysql only have special options in syntax of create table and alter table commands and column and index definitions no separate commands see docs activerecord takes all dirty work and hides all differences between implementations i think this is awesome.unfortunately im not really experienced in activerecord hacking and most of the work i have done blindly just by inserting code chunks here and there and seeing what errors will occur and whether tests will pass is there any docs about activerecord internals and architecture i would be glad to read them please review carefully and tell me what i should change i think this pr should be considered as work in progress hence it already do its job well.also i think that note about importance of schema documentation should be added to guides but cant imagine good place and good words for it and my english really isnt good enough for guides yet any suggestions are welcome
122076520,working in a branch so everyone in rails/rails can collaborate
120629844,since destroy_all actually loads the entire relation and then iteratively destroys the records one by one you can blow your memory gasket very easily so lets do the right thing by default and do this work in batches of by default and allow you to specify the batch size like so destroy_all(batch_size
120056885,this an pull request for issues discussed here i will be happy to hear any feedback as im not sure about correctness of the implementation
111136803,"hi,weve recently been investigating reports from our users that they are unable to submit forms.upon investigation it appears that browsers can get in a state where rails csrf cross-site request forgery protection stops the form being submitted to reproduceits possible to produce a minimal rails app which has this problem bashrails new csrf-testcd csrf-testbundle exec rails generate scaffold test test:stringbundle exec rake db:migratebundle exec rails server how to replicate it on mobile safari tested on ios load a page containing a form will be in this example quit safari by double-tap the home button and swipe up open safari from the home screen you should see the same page with the form submit the form.you will see the rails invalid authenticity token error this is a the change you wanted was rejected message in production or an actioncontroller::invalidauthenticitytoken in development ive also made a video that follows theese steps how to replicate on desktop safari tested on safari on osx go to safari preferences general and set safari opens with to all windows from last session load a page containing a form will be in this example quit safari with cmd+q open safari you should see the same page with the form submit the form.this problem seems to happen regardless if the app is served http or https the apps environment is development or production the browser is manually quit by the user or quit by the os to save memory)i have also been able to replicate on chrome on android i havent yet been able to replicate it on chrome and firefox on osx using their restore tabs options like i did in safari there may be other browsers that are affected whats happeninglooking at the rails logs and the cookie submitted by the browser i believe that the browsers are caching the page but clearing session cookies this means the form has a authenticity_token parameter but the rails session cookie has been cleared so has no corresponding csrf_token .here is a annotated log showing this log browser loads the form for the first timestarted get tests/new for at activerecord::schemamigration load ms select schema_migrations from schema_migrationsprocessing by testscontroller#new as html rendered tests/_form.html.erb ms rendered tests/new.html.erb within layouts/application ms)completed ok in ms views ms activerecord ms asset requests ommited browser quits clearing session cookies browser re-opens reloads the page from cache without doing a request browser posts the form:started post tests for at processing by testscontroller#create as html parameters utf=> authenticity_token=>ihsnuyly/riliujh+exktznpepfwavvb/tpwrnkirlwbalzfy+bpg+zqmfpjqeyvgbkblrwgrvnq test=>{test commit=>create test}cant verify csrf token authenticitycompleted unprocessable entity in ms activerecord ms)actioncontroller::invalidauthenticitytoken actioncontroller::invalidauthenticitytoken actionpack lib/action_controller/metal/request_forgery_protection.rb::in handle_unverified_request actionpack lib/action_controller/metal/request_forgery_protection.rb::in handle_unverified_request actionpack lib/action_controller/metal/request_forgery_protection.rb::in verify_authenticity_token stack trace truncated) ive tried to find more documentation about this kind of caching that browsers do i found this article about the webkit page cache but it appears to be out of date it says https pages do not use the page cache but i have seen this problem on http and https pages if anyone can find more about this id love to know.id like to know have others seen this problem i havent been able to find reported before or find any documentation regarding this but perhaps i have missed something is there a way that rails could be changed that would prevent this happening are there any workarounds for this that we could apply in our application?thanks for any help"
98821482,as of mysql mysql supports a native json data type rubycreate_table json_data_type do t t.json settingsend
97981289,ive been working on quite a few performance improvements to rails and the rails ecosystem but this is by far the single biggest set of improvements ive been able to make those other changes have maybe shaved off a few objects here and there and maybe or faster request time if im extremely lucky.this change shaves off objects and bytes mib allocated on every request this is a decrease in objects and a decrease in memory allocated per request taking us past ludicrous speed just how much does this improve overall request time to measure i used as an example app and to generate load i hit the app with requests with my patch and then requests against rails master i repeated several times until i saw a fairly stable standard deviation the average time for request against master was seconds and against this patch was seconds this gives us a speed improvementwhere does that speed improvement come from the big theme is not allocating objects when we dont need to i used derailed exec perf:objects which uses memory_profiler to look for large pockets of allocated memory against you can get an in-depth explanation of each change in the commit along with a benchmark of objects and memory saved the largest area i was able to make gains on was link generation by removing extraneous arrays duplicated hashes and getting rid of intermediate objects whenever possible i measured this speedup directly ruby bin/rails consolerequire benchmark/ipsrepo repo.firstbenchmark.ips do x x.report(url_for speed app.url_for(repo end this showed iterations per second on master and iterations per second on my patch which is a speed improvement in url generation.these performance improvements preserve existing interfaces and behaviors all tests pass
90486873,"hi all,i think for the following configuration accepts_nested_attributes_for validation seems to be broken!!rails ruby class country activerecord::base has_many cities dependent destroy accepts_nested_attributes_for citiesendclass city activerecord::base belongs_to country validates language uniqueness scope country_id endcountry country.new(description:abc language en-us cities: city.new(language en-us text abc city.new(language en-us text abc) )country.save! works!! c city.new(language en-us text abc country_id c.save!c city.new(language en-us text xyz country_id c.save does not work here is executable report efforts on this"
42730024,add native support for postgresql interval datatype with conversion from all postgresql formats to activesupport::duration on record load and transformation from activesupport::duration to iso on save no more strings also added support to define column in migrations and get it in schema dump optional column precision is supported parses iso duration format tells postgres to use it see output formats constructs activesupport::duration value that magic days converts activesupport::duration to iso duration format on save do not allows to use old raw values on save you must ensure youre feeding correct iso strings to model object allows to use numeric values treating them as number of seconds as some calculations with time objects returns not durations but floats)example: create_table events do t t.string name t.interval durationendevent.create!(name rock fest duration days)event.last.duration daysevent.last.duration.iso pd ive proposed this in rails-core google group here
33824863,virtual attributes are properly assigned to the object when combining includes and select but not when combining those with where example:p post.includes(:comments).select(posts as testval)p.first.title my postp.first.testval p post.includes(:comments).select(posts as testval).where(comments.id references(:comments)p.first.title my postp.first.testvalnomethoderror undefined method testval for post:xfcdbeb
27180722,regarding activerecord::enum assume you had something like rubyclass project activerecord::base enum color blue green red validates color inclusion in blue green red end currently if a bad value say orange is passed in an argumenterror is raised would be nice if the validation was preferred with the argumenterror as a fallback if there was no validation on that attribute so that youd be able to return a nicer error on the object later via the standard means rubyobject.errors.messages color=> is not included in the list kind of thing
11439039,from what i can tell strong parameters currently has no ability to permit a hash with unknown keys where this would be particularly useful is for the newly supported hstore and json data types a good example of this use case can be found here would have expected that passing an empty hash as an permitted value would allow a hash to be passed through e.g. params actioncontroller::parameters.new(product name test data weight kg params.require(:product).permit(:name data however this does not pass the data hash through though it is not documented that it should work).assigning the data parameter separately is an option but it complicates my code unnecessarily i would prefer to be able to stick with mass-assignment for all attributes.happy to work on a patch for this if this proposal is reasonable ive only just started looking into strong parameters though so there may be drawbacks i havent considered
2083158,reposting since the lighthouse importer auto-closed it even though it was still open on lighthouse..._problem upon destroying an activerecord::base object the before_destroy method which should trigger a transaction rollback if returning false is only exceuted after all child objects have been destroyed via dependent destroy.however this prevents before_destroy from seeing those same child objects in case it needs them to determine whether the destruction should be successful.expected behaviour: before_destroy should be called before any objects are destroyed even child records the before_destroy context should see the original state of the application as if destroy were never called it should be executed within the destroy transaction however so that any changes it makes can be rolled back. class foo ar::base has_many children dependent destroy has_many grandchildren through children before_destroy check def check will always be true since all grandchildren have already been destroyed at this stage return self.grandchildren.still_there.empty endendclass child ar::base has_many grandchildren belongs_to fooendclass grandchild ar::base belongs_to child scope still_there conditions end
