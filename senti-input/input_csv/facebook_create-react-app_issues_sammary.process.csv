issueId,body
345562783,adds typescript support.closes closes the user just needs to rename js to tsx and create a tsconfig.json file.they can optionally create a tslint.json file as well and it will be detected automatically.type checking happens using fork-ts-webpack-plugin .someone please review try it out and let me know how it could improve includes x make typescript work x bump babel due to flow conflict errors and other typescript fixes they made x support ts and tsx file extensions x add typescript option to react-app babel preset which enables babel/preset-typescript x nice to have x support flow or typescript automatically by detecting flowconfig and tsconfig.json x prevent enabling both flow and typescript in the same project x validate types and show output on console x tslint support x supports tsconfig.prod.json and tslint.prod.json x support for svg png and jpg imports x update docs pending improvements for some reason it only shows one typescript error at a time optional create a tslint-config-react-app preset based on eslint-config-react-app screenshots tstype testtype a bconst x testtype image how to try this pr while its not merged git clone git@github.com:brunolemos/create-react-app.git cd create-react-app yarn cd packages/react-scripts yarn link cd your/projects/folder npx create-react-app@next scripts-version=..-next.e app-name cd app-name yarn link react-scripts follow the steps from the readme adding typescript yarn start have fun with types
324726210,thanks to some titanic efforts from andriijas bugzpodder and others we finally have webpack in master hopefully ci will pass.lets use this task to keep track of followup things to do at the very least this looks suboptimal to me:
320529676,"hey there i was recently thinking about a way to keep cra zero-config to begin with but also allow it to grow/override if/when needed css-modules typescript lqip etc etc)my proposal would be to have a file at root level called react-scripts.config.js in which the template would look a bit like this: jsmodule.exports devconfig config webpack config productionconfig config webpack config serverconfig config webpack config,} in all of those cases they would take a function with the first argument being the opinionated config from cra and a second optional argument which would be the same webpack used for whatever script being used for plugins or whatever)so now the user can tweak that config or even make another one remembering that in the end he has to return a config object for webpack to consume.now on the scripts code we can run fs.existsfilesync to check for that file and then to check if the object has that prop which we care for depending on the case eg on start script check for either devconfig or serverconfig so now we can do something like: js react-scripts/scripts/start.js for example defaultconfig would be the one living on react-scripts/config/webpack.config.dev.js for example const userconfig path.join(process.cwd react-scripts.config.js const hascustomconfig existssync(userconfig require(userconfig).devconfig const config hascustomconfig require(userconfig).devconfig(defaultconfig webpack defaultconfig rest of normal code this would make it still be zero-config but extendable that way users dont have to choose between no freedom or all the freedom but rather get the right amount of freedom without losing on updates or forking the package.does this has potential lmk and i could work on a pr to make this happen i dont think its a really big change on the codebase to achieve.cheers and thanks to everyone for this awesome package."
318054408,please read the first section is this a bug report?not exactly unless module incompatibility counts as a bug environment node v npm v yarn version if you use yarn npm ls react-scripts if you havent ejected n/a install is failing)then specify operating system windows browser and version if relevant steps to reproduce how would you describe your issue to someone who doesnt know you or your project try to write a sequence of steps that anybody can repeat to see the issue.-->(write your steps here install node v run create-react-app await the error expected behavior how did you expect the tool to behave its fine if youre not sure your understanding is correct just write down what you thought would happen.-->i was hoping for a nice clean install of the base project actual behavior did something go wrong is something broken or not behaving as you expected please attach screenshots if possible they are extremely helpful for diagnosing issues.-->install failed:! image
316531081,the create-react-library npm module is a cli for easily publishing modern react libraries its meant as the library equivalent of create-react-app and developer feedback thus far has been excellent.in particular it uses cra for example usage and local module development modules are bundled via rollup+babel to generate commonjs and es module formats.i was wondering if the core react team would consider giving feedback on the create-react-library project and possibly endorsing it as a sister of create-react-app .fwiw i also work at facebook.
307409050,opt-in support for sass and css-modules using sass files added using both scss and sass extensions.this pr installs sass-loader in the react-scripts package adds webpack configuration to allow importing scss/sass directly into components during development supporting also the use of css-modules adds webpack configuration for bundling scss/sass files into the optimized production build supporting also the use of css-modules css-modules in sass are supported in a similar way than using purely css which in this case is naming sass files as module.scss or module.sass.~no automated test just yet coming in a couple days however ive manually tried the ee flow using both scss and sass extensions with or without modules and it worked just fine.~~edit white_check_mark unit and integration tests added!~this pr depends on to work properly white_check_mark merged and integrated!ill be happy to get comments edit andriijas mentioned that we should use react-dev-utils/getcssmodulelocalident when is merged for the localidentname white_check_mark merged and integrated
304493955,zero-config typescript with babel as mentioned in several other issues with the release of babel and cra typescript support is now possible in a way that does not dramatically change the core of cra internals before proceeding with a pr would love to gather feedback on a solution implementation i came up with over the weekend current behaviortypescript users cannot use cra directly popular alternatives include react-scripts-ts a fork of cra that uses the typescript compiler and microsofts react typescript boilerplate desired behaviorcra works with typescript via babel with zero-config to enable typescript users can just rename src/index.js to src/index.tsx suggested solution remove filename extension from paths.appindexjs i.e src/index.js src/index so it works regardless of js or ts or tsx add ts and tsx to the extensions in webpack config resolve babel loader file-loader and jest config add a usetypescript flag so that this choice is explicit and related babel/preset-typescript package to babel-preset-react-app use the filename extension of paths.appindexjs to determine whether to set the usetypescript flag in webpack babel-loader options and jest babel transformation add documentation about typescript usage areas of interest/discussion/questions alternative ways to determine whether to enable ts should tsconfig.json and tslint.json be zero config probably not should we add built-in type checking with fork-ts-webpack-plugin my vote is against this bonus add tslint-loader to webpack config if in ts mode question can we use eslint-loader with babel ts im not sure if not we should add a minimal tslint-config-react-app package that is congruent with eslint-config-react-app suggested documentationtypescript is a typed superset of javascript that compiles to plain javascript check out this introduction to using static types in javascript if you are new to this concept.recent versions of typescript work with create react app projects out of the box thanks to babel babel typescript does not allow some features of typescript such as constant enum and namespaces you can read more about babel typescript here.to add typescript to a create react app project follow these steps run npm install save typescript types/react types/react-dom or yarn add typescript types/react types/react-dom add type-check tsc to the scripts section of your package.json add a resolutions section to your package.json to avoid conflicting types of react and reactdom in your dependencies: jsonresolutions types/react types/react-dom create a file called tsconfig.json in the root of your project: json compileroptions target esnext specify ecmascript target version es default es es es es or esnext module commonjs specify module code generation none commonjs amd system umd es or esnext jsx react use react to interpret jsx noemit true do not emit outputs allowsyntheticdefaultimports true allow default imports from modules with no default export rename src/index.js to src/index.tsx now you can run npm run type-check or yarn type-check to check the files for type errors you can optionally use an ide like nuclide or vscode for a better integrated experience.to learn more about typescript check out its documentation
303755774,is this a bug report?yes did you try recovering your dependencies?yes npm version which terms did you search for in user guide there are a few common documented problems such as watcher not detecting changes or build failing they are described in the troubleshooting section of the user guide please scan these few sections for common problems additionally you can search the user guide itself for something youre having issues with if you didnt find the solution please share which words you searched for this helps us improve documentation for future readers who might encounter the same problem.-->async js chunks that include css imports cause uncaught in promise typeerror cannot read property call of undefined environment please fill in all the relevant fields by running these commands in terminal node v v npm v yarn version if you use yarn npm ls react-scripts if you havent ejected react-scripts@..then specify operating system ubuntu browser and version if relevant chromium steps to reproduce how would you describe your issue to someone who doesnt know you or your project try to write a sequence of steps that anybody can repeat to see the issue a.js import common b.js import common common.js import common.css;import async.js async import async.js import async.css expected behavior how did you expect the tool to behave its fine if youre not sure your understanding is correct just write down what you thought would happen.-->to have async.css working in an async chunk after running npm run build actual behavior did something go wrong is something broken or not behaving as you expected please attach screenshots if possible they are extremely helpful for diagnosing issues.-->uncaught in promise typeerror cannot read property call of undefined at webpack_require bootstrap d at object async.css at webpack_require bootstrap d at object async.css?eb at webpack_require bootstrap d at object cbe.chunk.js at webpack_require bootstrap d reproducible demowell its a webpack issue in the first place but also happening with cra its described in details here with reproduction steps with a repo to reproduce the error if you can please share a project that reproduces the issue this is the single most effective way to get an issue fixed soon there are two ways to do it create a new app and try to reproduce the issue in it this is useful if you roughly know where the problem is or cant share the real code or copy your app and remove things until youre left with the minimal reproducible demo this is useful for finding the root cause you may then optionally create a new project this is a good guide to creating bug demos once youre done push the project to github and paste the link to it below what happens if you skip this step we will try to help you but in many cases it is impossible because crucial information is missing in that case well tag an issue as having a low priority and eventually close it if there is no clear direction we still appreciate the report though as eventually somebody else might create a reproducible example for it thanks for helping us help you
300720522,support for mjs files added in did not account for npm libraries which ship native mjs files alongside js files this accounts for this by ensuring js files resolve before their accompanying mjs file note that this is not an ideal end state since selecting a mjs over a js extension should be the result of whether import was used instead of require in a node environment with native esm support currently via experimental-modules instead this change just always selects a js extension before the mjs extension if it exists.this unbreaks support for using graphql relay apollo etc within create-react-app projects.
300153426,x update to webpack x.x x utilize webpack development and production modes x upgrade webpack dev server x webpack compatible release of thread-loader x webpack compatible release of htmlwebpackplugin x webpack compatible release of swprecachewebpackplugin x webpack compatible release candidate of webpackmanifestplugin x update readme x update webpackdevserverutils x update interpolatehtmlplugin x update modulescopeplugin x update watchmissingnodemodulesplugin x use optimization.minimizer for custom uglify options x use optimization.splitchunks for vendor splitting x create-react-app polyfills included in vendor chunk x use optimization.runtimechunk for long term caching x remove react-error-overlay is not meant for use in production warning from dev mode by updating webpack config to proxy process.env.node_env from ancestor x replace extracttextplugin with minicssextractplugin x implicit webpack.namedmodulesplugin in dev config as its default in webpack x disable webpack performance hints as we have our own filesize reporter x move interpolatehtmlplugin to make it tapable on htmlwebpackplugin x replace extracttextplugin with minicssextractplugin x switch to css whole file minification via optimizecssassetsplugin rather than per module css minification to gain performancefixes
298805135,i want to be able to provide self-signed certs and keys to my app during localhost development these files need to be passed to the webpack-dev-server that runs behind the scenes when i do the npm start script from this package there are many ways to sign your own ssl certificate and i know webpack-dev-server has the ability to run https over its own self-signed certificate.however this doesnt meet my request i also know that the webpack-dev-server can take in key and cert file locations as arguments and that is what my issue is targeting i think we should add the ability to configure certificate and key file locations this will make any development requiring ssl on localhost more straightforward.how could we go about doing that i think there are two options make them optional command-line arguments for the npm start script configurable in package.json make the keys and certs follow a common naming convention or possibly use a certain folder structure
296889732,using jest with puppeteer can be great for example i like to take screenshot from the headless browser to test regression of the user interface the result is just right here
293164909,associated issue to analyze webpack bundles a stats json is required.this pr allows that file to be created and saved to the build directory so that users can use it with webpack-specific insighttools like webpack-bundle-analyzer without ejecting theirapplication.updated the readme to include details for how to do this test plan check that the stats flag works i ran yarn build stats in the root directory of the project once it completed i verified that build/bundle-stats.json existed i dragged it into webpack visualizer to check that the file is correct:
292549809,use worker-loader to turn any file that ends with worker.js into a webworker.closes here is the sample webworker code i used to test this hello.worker.jslet hellointerval;const sayhello self.postmessage message hello self.addeventlistener(message event if event.data.run true self.postmessage status worker started hellointerval setinterval(sayhello if event.data.run false self.postmessage status worker stopped clearinterval(hellointerval index.jsimport react from react;import reactdom from react-dom;import index.css;import app from app;import as serviceworker from serviceworker;import helloworker from hello.worker.js;reactdom.render(
290993386,this pr adds the graphql file loading feature discussed in poc of the concept can be found in might need to link to react-scripts after installing tested the following things works while developing with yarn start works after building with yarn build also looked at the output after ejecting and it looks correct couldnt test it yet though after yarn eject due to some version issues the pr adds following things ability to load and preprocess graphql and gql files with graphql-tag/loader updates the readme.md and user guide with descriptions and usage adds a jest transform so the graphql files work with tests tootested it out with react-apollo and it worked beautifully should work with relay modern too but prerequisite for it is
290821502,i think it would be useful to be able to define a custom env file.i have three different environments my app will run on dev staging and production dev and production are covered but right now it doesnt seem like theres any easy way to have separate environment variables for other stages.it would be handy if an additional environment variable could be specified to select the custom env file and use the default env files if the additional variable is undefined.e.g in windows) start react-scripts start uses env.development start set react_app_env=devstaging react-scripts start uses env.devstaging build_staging set react_app_env=staging react-scripts build uses env.staging build react-scripts build uses env.production the custom env file would be overriden by the local version just how it works currently with development production and test im not confident enough to make the change myself but it seems like adding this would require a change in the react-scripts config jest env.js file where the dotenvfiles variable is set react-scripts v..).creating this from my comment on issue a way to define custom environment variables
290293666,sorry for removing the github template it was irrelevant anyway:as continuation of my comment from i know this issue discussed in the past in many different issues and yet i think we should revisit the support of custom eslint config by user or at least the ability to remove it so we can use our configuration or even in cases where users dont feel they need eslint good part with current state most of the configuration is good config is config is config if there is something the user can configure it might break in future versions pain points with current statecurrently the only option to really control the configuration of eslint is by eject or by fork in both cases we lose the charm of using react-scripts which makes most things to be more convenient and tools that are updated automagically between versions of packages such as webpack end eslint as well.but lack of controlling the configuration can cause a lot more issues which makes the eslint part in create-react-app to be a pain for development.the eslint-config-react-app does contains stylistic rules even tough theyre not from the prettier kind for example default-case rule forces me to put empty default case even when its an empty and unneeded since in my project the convention it to do the default after the switch-case block or in cases when default is really unneeded.its easy to say just add eslint-ignore default-case but it becoming more of a file template than some exception that happens here and there.moreover even most consensus rules such as eqeqeq might not feet to any project and will be more of stylistic choice rather than the right one for example i worked on a project where ive used flow and have a lot of cases where was more than a necessary to make code readable since when youre type is string null undefined and you need to make lots of compares things like a b was much better than a b a null b null ive simplified the if statement flow can make sure its not number compared to string and i know its an edge case but it was only for a demonstration).plugins are very useful but when i cant config it means no real use of plugins because on the browser ill have one configuration and on then ide cli ill have other configuration which is a pain there some cases youll need to remove some eslint rule because some plugin gives you a better rule which might conflict with the original rule but you cant configure so warnings errors in the browser will be leave you with conflicts.and the actual use of plugins is discourage since as i said before ill get in the browser different result from what happens in the ide cli.half related issue why should i need to wait to the support or be forced to the plugin if i dont need?)globals are also a big issue if you forced to use third party code from a cdn it means youll have a lot of globals myawesomeglobal in your files and please dont tell me to use window or global its a temporary work around not a solution.in many cases when ill want to remove the global since we stop to use some third party service i wont have an easy way to know it truly happens when im not the only one who work on the project using window or global will only make it harder moreover as browsers become more and more modern and some script will start use global as let or const the variable wont exist on the window object not to mention when a file should run also inside worker node which only makes things more complicated for using globals).moreover there are libraries such as modernizr that force me to generate a file to src folder that generated automatically if ill add it to public it will force another network request call and if i put it in src it forces me to add manually eslint-disable or start creating boilerplate scripts for this kind of code injection.relates issue dont get me wrong i fully understand the project philosophy and admire the work that have been done but on the other hand you lock me with this project configuration for a linter with specific rules which makes it harder work for me than not having the linter from the first place since there is no easy way to opt-out without ejecting/forking it makes it harder as more conflicts with the eslint-config-react-app happens during project life time.moreover you actually do have configurations such as homepage even if its not much eslint is one of the biggest pain points for me in the create-react-app suite suggestionmy suggestion is to allow custom configure or at least to disable eslint project wide.related issue for disable eslint related issue for allow custom config p.s i can find more related issues to every issue ive wrote here but i dont think it gives any value
290213666,were going to keep x in alpha stage for at least a month or two as we wait for babel to get stable we might as well jump straight to webpack ayc seeing that you worked on and feel passionate about solving this would you like to work on this
288975124,we have just released react-scripts and aside from critical vulnerabilities or similar issues we intend this to be the last x release our work on the x release of react-scripts is in the next branch and we switched it to be the default on github this way people who automatically sync their forks with master will only get non-breaking updates until the next branch is truly ready already mergedso whats gonna be in x heres a few big things that are already in the next branch babel jest babel macros es-compatible uglify configurable target browsers js css compile node_modules with env preset parallelization of babel preflight dependency check opt-in support for css modules opt-in support for sass svg as react components remove proptypes definitions in the production build service workers are now opt-in support for lerna or yarn workspaces very likely to land in but might need your help)there are many more things we want to do but it will require help from the community for now theyre optimistically tagged with a milestone issues prs but its likely well only get to some of them if you feel strongly about any of them look at these issues offer help if youd like to increase their changes of getting landed provide feedback to people who submit prs help them with planning and design etc what gets merged in the end really depends on your participation.i feel strongly that these are blockers that should get into warn about duplicate dependencies more end-to-end test coverage for compiling node_modules needs prs)theyre relatively fleshed out although sass will need somebody to make a pr once other pieces are in place we should also figure out a way to make sass work with css modules well also need a pr for making service workers opt-in issues and prs that need more work and discussionthese look less fleshed out to me and might need more discussion design and implementation work long term caching we have a pr in but maybe we want instead needs somebody to figure out the tradeoffs add a separate lint script serve development from the same path as production broken hot reloading seems a bit wonky to me but maybe you can convince me otherwise refuse to build when importing transitive dependencies needs testing and potentially someone picking it up please participate!so what do you think does this list look exciting to you if you want to help please participate i dont expect that ill have a ton of time to work on all of this personally but we have a really great community and i hope you can help us flesh out these proposals if you also want to help maintaining the project and have some experience maintaining open source projects not necessarily large ones please also let us know how can i test this now were happy youd like to test the next version of react-scripts before getting into the details wed like to make you aware of a few things features may be broken or not work as expected there will be more breaking changes introduced before the final release documentation for new features is still sparse so look through the pull requests for how theyre expected to workyou can install the latest alpha version of react-scripts using one of the following commands: bash create a new application npx create-react-app@next scripts-version=..-next.e app-name upgrade an existing application yarn upgrade react-scripts@..-next.e known issues in x alphasbuild errors sometimes do not show any detail you want to cut a new alpha? bash npm_config_otp npm run publish canary=next exact cd-version major npm-tag=next npm-client=npm
288386529,i have a question.instead of providing proxy information via the package.json is it possible to achieve exactly the same thing by providing this information directly into environment variables
288361099,proof of concept for currently runs all node_modules through babel-preset-env .(which was unsafe in babel but shouldmaybebe safe in babel i dont know the impact on the build time itll definitely make the cold start slower but hopefully repeated builds will be okay we need some measurements with larger projects here intentionally only did this for webpack i dont think we need to do this for tests because you control the node version on which you run the tests unlike the users browser and its never required to compile because we intentionally dont allow any custom transforms like jsx only real js gets compiled.todo x measure build time impact consider opt-out heuristics e.g too old engines field that implies we dont need compilation verify this doesnt break third-party code verify generators and async/await work in deps verify helpers for the above are being shared e.g runtime transform verify babelrc in packages gets ignored create end-to-end tests for these situations
287637053,this adds support for lerna and yarn workspace monorepos are some open questions as to how monorepos should work so this is just a starting point.testing was performed with example and instructions at this pr pulls in changes from which is for supporting running create-react-app in a monorepo space
287071466,problemwe currently allow you to do this: jsimport logo from logo.png; after getting used to it youll probably be comfortable with this giving you a url.but what about other types for example what should this return? jsimport doc from doc.md; markdown source compiled html an ast?what about this? jsimport icon from icon.svg; should this give you a link the svg content a react component?the usual answer is decide it for yourself in the configuration file however that doesnt work for cra so we decided to treat all unknown extensions as url imports this is not ideal because in some cases it just doesnt make any sense and in others there are advanced but still relatively common use cases that arent satisfied proposalwhat if we allowed to user to pick what they want from a limited supported subset per filetype? jsimport url as logourl from logo.png;import html as dochtml from doc.md;import reactcomponent as icon from icon.svg; named imports are checked by webpack so youd get a compile error if you use an unsupported one.things that are unused will be tree shaken so if you only use e.g html of markdown files their source wont be bundled same for svgs whether you consume them as raw source urls or react components).other zero-configuration tools can also adopt this approach concerns what do we do with the default import ideally id like to forbid it for anything other than js/css because the intent is not clear for asset files which version do you get we could do this with a lint rule if we make the breaking change how do we update the consumers we could write a codemod it should be very simple it would be nice to coordinate this across at least a few other projects e.g ndelangen storybook maybe kyleamathews gatsby devongovett parcel rauchg next would also be interested i imagine well need to write a multi-file webpack loader for this but i dont see why other bundlers couldnt adopt a similar convention build performance generating all possible content variations can be too slow ideally it would be nice if loaders had information about which import was used.thoughts
286925890,use svgr webpack loader to wrap svgs in react components as a named export svg filenames are still available as the default export. import logo from logo.svg gives you the filenameimport reactcomponent as logo from logo.svg gives you a react component logo closes
286512442,please read the first section is this a bug report?yes can you also reproduce the problem with npm x many errors especially related to missing modules are due to npm bugs which version of npm are you running you can find out by checking npm v if it is x please be aware that it has more than known bugs and is not guaranteed to work with create react app if its not starting with try to install npm x npm install g npm cd your_project_directory rm rf node_modules npm cache clear npm install then try to reproduce the issue again can you still reproduce it note please try this even if you are using yarn so that we know whether its a yarn-only bug.-->i have tried npm with the same issue which terms did you search for in user guide there are a few common documented problems such as watcher not detecting changes or build failing they are described in the troubleshooting section of the user guide please scan these few sections for common problems additionally you can search the user guide itself for something youre having issues with if you didnt find the solution please share which words you searched for this helps us improve documentation for future readers who might encounter the same problem environment please fill in all the relevant fields by running these commands in terminal node v npm v yarn version if you use yarn npm ls react-scripts if you havent ejected then specify operating system windows browser and version if relevant steps to reproduce how would you describe your issue to someone who doesnt know you or your project try to write a sequence of steps that anybody can repeat to see the issue.-->(write your steps here npm install g create-react-app create-react-app react-app expected behavior how did you expect the tool to behave its fine if youre not sure your understanding is correct just write down what you thought would happen.-->it will create a folder actual behavior did something go wrong is something broken or not behaving as you expected please attach screenshots if possible they are extremely helpful for diagnosing issues.-->it will throw the following error: creating a new react app in c:\users\somepath\react-app.installing packages this might take a couple of minutes.installing react react-dom and react-scripts...npm err code etargetnpm err notarget no compatible version found require-from-string@^..npm err notarget valid install targets:npm err notarget npm err notargetnpm err notarget this is most likely not a problem with npm itself.npm err notarget in most cases you or one of your dependencies are requestingnpm err notarget a package version that doesnt exist.npm err notargetnpm err notarget it was specified as a dependency of cosmiconfignpm err notargetnpm err a complete log of this run can be found in:npm err c:\users\me\appdata\roaming\npm-cache\_logs\--t___z-debug.logaborting installation npm install save save-exact loglevel error react react-dom react-scripts has failed.deleting generated file package.jsondeleting react-app from c:\somepathdone reproducible demo if you can please share a project that reproduces the issue this is the single most effective way to get an issue fixed soon there are two ways to do it create a new app and try to reproduce the issue in it this is useful if you roughly know where the problem is or cant share the real code or copy your app and remove things until youre left with the minimal reproducible demo this is useful for finding the root cause you may then optionally create a new project this is a good guide to creating bug demos once youre done push the project to github and paste the link to it below:-->(paste the link to an example project and exact instructions to reproduce the issue what happens if you skip this step we will try to help you but in many cases it is impossible because crucial information is missing in that case well tag an issue as having a low priority and eventually close it if there is no clear direction we still appreciate the report though as eventually somebody else might create a reproducible example for it thanks for helping us help you
285555542,closes this will remain undocumented until the brave have tried it in the wild. test plan: theres currently no established way to test changes to babel-preset-react-app but i did create unmaintained-react-scripts-babel-macros a while back and it worked well
285504155,its been a while since i cut a release but i should have some time the next couple of weeks whats ready enough that we can get this in i was thinking of updating jest to but are there other prs that are almost ready its okay if those are breaking changes since jest update itself is a breaking change
285147334,add ability to load webworkers and sharedworkers via the react-scripts my use-case is for using latency and debug sensitive protocols over websocket which may get dumped by the server if no activity occurs.there has been a lot of discussion regarding this on but no definitive answer and now closed also im a server-side dev so javascript pr is not my forte and neither is ejecting the scripts as that looks scary
278993779,if i add a symlink in my src directory to another directory and then include files from that path create-react-app gives an error module parse failed unexpected token you may need an appropriate loader to handle this file type.i assume create-react-app wants to have this import already built/transpiled i would expect this to be the case for imports outside the src directory node_modules for example but since the symlink resides in the src directory i would assume create-react-app would fetch these files as if they were truly in src directory.is this a bug or expected behaviour it makes it really hard to extract common components
277616195,ejecting is a real shame for any instance of create-react-app so i found a way to use webpack-bundle-analyzer without ejecting hopefully this will save someone out there from having to eject to make this addition create a file in root i call mine build.js add this javascript. jsprocess.env.node_env productionvar bundleanalyzerplugin require(webpack-bundle-analyzer bundleanalyzerpluginconst webpackconfigprod require(react-scripts/config/webpack.config.prod)webpackconfigprod.plugins.push new bundleanalyzerplugin analyzermode static reportfilename report.html require(react-scripts/scripts/build node build.js
271305500,is there any interest in officially supporting typescript in create-react-app i think having to fork the repo to add support is a bit unfortunate.creating a react-scripts only fork is nice however theres still a bunch of lightly modified upstream code
271270566,import is great for code splitting but its not enough to use in your app on its own. react loadable provides the rest for any react app loading states error states avoids flash of loading state timeouts loading multiple resources in parallel preloading the biggest problem is with server-side rendering.when you use an app with nested asynchronously loaded components it creates this waterfall effect one component loads to render its children where one of the children loads another component which loads another component and so on.this forces you to be annoyingly careful with which component you allow to load async.react loadable manages to use server-side rendering in order to avoid this waterfall it preloads all of your components server-side and as it renders them it makes sure to send down the relevant script and link tags.i know that create react app doesnt do any kind of server-side rendering yet but react loadable is a really great default for the ecosystem but i would like to see what it would look like if we set up a client-side portion for cra users.right now the way i have people set it up looks like this src/entry.jsimport react from react;import reactdom from react-dom;import loadable from react-loadable;import app from components/app;window.main loadable.preloadready().then reactdom.hydrate(window.main(); that way we can trigger our code to run after all the other necessary bundles are in place which makes for a seamless transition when doing server-side rendering.using react loadable like this allows you to place hundreds of dynamically loaded components all over your app without slowing down the startup experience with loading screens and speeding it up by not needing to load nearly as much code.is there something that we can put in create react app that makes it easier to setup react loadable or similar tools
261154825,with the recent release of react react is beginning to depend on more browser features such as map set and requestanimationframe issue proposes dropping support for ie and ie as they had reached end-of-life on january ie has basic support for map and set enough for react to function also has support for requestanimationframe and cancelanimationframe is not supported in any version of internet explorer nor is object.assign or promise so all existing polyfills would have to remain.this will prevent us from having to add about kb in polyfills and has the added benefit of increasing our syntax support level to that of ie this allows users to use let const and block level function declarations in depended upon packages
261039842,is this a bug report?yes can you also reproduce the problem with npm x?yes which terms did you search for in user guide?i searched about testing about enzyme and on the troubleshooting page as well environment node v v npm v yarn version if you use yarn npm ls react-scripts if you havent ejected react-scripts@..then specify operating system windows steps to reproduce npm install g create-react-app create-react-app test-jest-enzyme cd test-jest-enzyme change file src/app.test.js to be: jsximport react from react;import app from app;import shallow from enzyme;it(renders without crashing shallow(.it src/app.test.js reproducible demo
260817198,is this a bug report?yes which terms did you search for in user guide?the issue is documented at steps to reproduce start a project create-react-app project try to run the template tests yarn test expected behaviori expected the testing to complete without warnings out-of-the-box as it did pre-r actual behaviorall tests pass but prints message console.error node_modules/fbjs/lib/warning.js warning react depends on requestanimationframe make sure that you load a polyfill in older browsers
260764110,upgrade to react v
257616752,is this a bug report?noeverything described in this article but for lazy ones ill add some highlights here. html browsers with es module support load this file script type=module src=main.js>
254079539,is this a bug report?yes can you also reproduce the problem with npm x?i am using npm and its a yarn specific bug anyways which terms did you search for in user guide?i simply searched the github repo for workspace and yarn workspace i didnt see a relevant error message/issue environment node v npm v yarn version npm ls react-scripts empty no scripts to use)then specify operating system osx el capitan steps to reproduce mkdir err-demo cd err-demo touch yarnrc echo workspaces-experimental true yarnrc touch package.json write json name meme version main index.js private true workspaces packages/* } to package.json mkdir packages cd packages create-react-app test or expected behaviorcreate-react-app would use the tools installed at the workspace level actual behaviordoesnt find the tools and just complains: aborting installation.unexpected error please report it as a bug error cannot find module users/penguinsoccer/code/js/err-demo/packages/test/node_modules/react-scripts/package.json at function.module._resolvefilename module.js at function.module._load module.js at module.require module.js at require internal/module.js at checknodeversion users/penguinsoccer/.config/yarn/global/node_modules/create-react-app/createreactapp.js at getpackagename.then.then.then.packagename users/penguinsoccer/.config/yarn/global/node_modules/create-react-app/createreactapp.js at anonymous at process._tickcallback internal/process/next_tick.js code module_not_found reproducible demo just using regular logic it seems that create-react-app is unaware about yarn workspaces which install at the package level node_modules rather than for each individual folder in the workspace.create-react-app goes for the folders node_modules when the node_modules are kept in the workspace root.although from my understanding yarn attempts to link node_modules in each directory to the root workspace so then i dont know what the issue is.whether create-react-app should support yarn workspaces is up to you guys and low priority for me since i probably wont use it anyway think its a cool project though
252855790,"this issue is a delete as appropriate question support requesthello all i am new to react.js actually i downloaded a theme which have external javascript libraries i.e bootstrap.min.js jquery.min.js slider.js jquery-flexslider,min.js i created a react app using create-react-app and i copied all the external javascript libraries and css files in index.html of the public folder of my react app and copied all the html of index.html of my theme in app.js which i downloaded all the css are working fine but the javascript libraries are not working on the page.following is the demo of how i included the css files and javascript libraries in index.html of the public folder.</script script src=/assets/javascript/bootstrap.min.js></script script src=/assets/javascript/jquery.easing.js></script script src=/assets/javascript/jquery-waypoints.js>"
250649765,"update heres my latest thinking on this this comment is old.----currently we cant unambiguously tell how you want to treat a random file so we fall back to the simplest behavior for everything except js and css for example if you import file.md or file.svg we give you a url to it because we dont know for sure what you need to do with it.this works for many cases but can be annoying when you want to treat a file like data for example describes a use case for importing svg as a react component and describes a use case for loading markdown files we dont want to use webpack loader syntax for this because it is webpack-specific and other tools dont understand it however i now realized we might not need to.what if we determined this by file extension instead for example, jsimport docs from docs.raw.md;import iconsvg from icon.raw.svg; sure this means you have to encode how the file is used into the file itself and also need to have control over it for example this wouldnt work if you wanted to import svg from an npm package but on the other hand this doesnt work anyway so at least this doesnt make it worse but provides an escape hatch for cases when you need that extra option.this approach is consistent with other cases where we might look at filenames for example there is an ongoing proposal to use module.css for opting into css modules.what do you think update heres my latest thinking on this this comment is old"
248151122,ok this just took me a while to figure out and im mainly adding this to help someone else googling in the future this was my error: (fsevents.framework fseventstreamstart error fsevents_connect ipc/send invalid destination port i was also getting this when trying to git clone: no user exists for uid it turns out its something to do with this iterm bug when you restart your mac and iterm resumes its sessions so if youre seeing anything like this in the future try restarting iterm and it should go away
243900266,this includes pr heres an example of a working plugin which enables typescript support for development production and testing. click here to see the diff without pr
242791051,a plugin system is something which proposes to solve many problems.for instance wed like to be able to add support for things like relay without increasing the initial installation size of the build tooling.this could also be applied to things like typescript sass et al.design goals zero-configuration opt-in additional features simple setup yarn add react-scripts-plugin-relay transparent to users who eject internal use only not pluggable sorry!)we need a lot of discussion about this before we can progress further
242565644,please read the first section is this a bug report?yes seems like it to me if you answered yes please note that your issue will be fixed much faster if you spend about half an hour preparing it including the exact reproduction steps and a demo if youre in a hurry or dont feel confident its fine to report bugs with less details but this makes it less likely theyll get fixed soon in either case please fill as many fields below as you can if you answered no if this is a question or a discussion you may delete this template and write in a free form note that we dont provide help for webpack questions after ejecting you can find webpack docs at can you also reproduce the problem with npm x many errors especially related to missing modules are due to npm bugs which version of npm are you running you can find out by checking npm v if it is x please be aware that it has more than known bugs and is not guaranteed to work with create react app if its not starting with try to install npm x npm install g npm cd your_project_directory rm rf node_modules npm cache clear npm install then try to reproduce the issue again can you still reproduce it note please try this even if you are using yarn so that we know whether its a yarn-only bug.-->i havent tried yet i think that would be a wild goose chase this problem just started today out of the blue my hunch is that is an environment problem of some sort which terms did you search for in user guide there are a few common documented problems such as watcher not detecting changes or build failing they are described in the troubleshooting section of the user guide please scan these few sections for common problems additionally you can search the user guide itself for something youre having issues with if you didnt find the solution please share which words you searched for this helps us improve documentation for future readers who might encounter the same problem.-->i did a google search instead found no help environment please fill in all the relevant fields by running these commands in terminal node v v npm v yarn version if you use yarn dont use npm ls react-scripts if you havent ejected react-scripts then specify operating system macos browser and version if relevant chrome version official build bit steps to reproduce how would you describe your issue to someone who doesnt know you or your project try to write a sequence of steps that anybody can repeat to see the issue.-->(write your steps here:)invoke create-react-app my-app no issues here cd my-app npm startafter step the console window shows: failed to compile../src/index.jsmodule build failed error failed to load plugin import cannot find module eslint-plugin-importreferenced from at array.foreach native at array.reduceright native expected behavior how did you expect the tool to behave its fine if youre not sure your understanding is correct just write down what you thought would happen.-->(write what you thought would happen actual behavior did something go wrong is something broken or not behaving as you expected please attach screenshots if possible they are extremely helpful for diagnosing issues.-->(write what happened please add screenshots reproducible demo if you can please share a project that reproduces the issue this is the single most effective way to get an issue fixed soon there are two ways to do it create a new app and try to reproduce the issue in it this is useful if you roughly know where the problem is or cant share the real code or copy your app and remove things until youre left with the minimal reproducible demo this is useful for finding the root cause you may then optionally create a new project this is a good guide to creating bug demos once youre done push the project to github and paste the link to it below:-->(paste the link to an example project and exact instructions to reproduce the issue what happens if you skip this step we will try to help you but in many cases it is impossible because crucial information is missing in that case well tag an issue as having a low priority and eventually close it if there is no clear direction we still appreciate the report though as eventually somebody else might create a reproducible example for it thanks for helping us help you
241719708,given that react and reactdom are so prevalent and therefore likely to exist in the browser cache it seems to make sense to have an option to build the package with an option to to include react and reactdom statically in the html file.it would make the initial load that much snappier.is this something that could be considered
241589687,id like to preface this by stating that it is very likely a system like this may never be added to create-react-app and is simply being showcased to create discussion around the feasibility of such an idea.a plugin system is something which proposes to solve many problems.for instance wed like to be able to add support for things like relay without increasing the initial installation size of the build tooling.this could also potentially be applied to things like typescript sass et al.design goals zero-configuration opt-in additional features simple setup yarn add react-scripts-plugin-relay transparent to users who ejectdesign constraints do not increase the initial installation size with excess modules under no circumstances retain a plugin system when ejecting everything must be flattened into a single file---this pr introduces a poc plugin system with initial support for typescript todo x install plugin dependencies when ejecting x add eject step for plugins copy files e.g tsconfig.json etc
240893177,code modifiers are becoming popular in the javascript ecosystem via babel-plugins eg many css-in-js libs relay etc this issue is to open discussion on a generic system to include them in cra apps but still honouring the zero-config philosophy the proposal here is to have a constrained form of babel-plugins disguised to appear like regular libraries a short writeup on what it would look like here modifiers/macros would be isolated in files with macros.js suffixes there would no real trace of them in the final bundle stripping imports of all macros.js considering theyre localised and used on demand i expect them to have little effect on build performance so can be enabled in both dev/prod because theres no dependence on webpack it should still work with other js tooling like jest etc im looking for feedback on the same before i start writing code for it as well as possible first implementations maybe a simple css-in-js lib?)if this doesnt belong here feel free to close the issue thanks
240878382,added react-script for linting with specifications in
240134266,this pr adds an ability to use importscripts option of swprecachewebpackplugin .how-to create a file called public/service-worker-import.js run npm run build check that file has been loaded either in console network panel or by placing console.log statement inside and checking for output by refreshing the pagefile is being imported only on service worker install update .downsides its possible to import only one file and its name is harcoded file is not being passed trough plugins minification etc)fixes
238792117,can you reproduce the problem with npm x?yes have you read the troubleshooting section and searched the user guide?yes environment please fill in all the relevant fields by running these commands in terminal node vv npm v.. then specify operating system ubuntu steps to reproduce install eslint-config-react-app console shows warning expected behaviorno warnings actual behavior warning definition for rule jsx-ay/href-no-hash was not found jsx-ay/href-no-hash
237073412,webpack has released. this article by thelarkinn highlight new features in this release of webpack.---i updated on my local machine and ran on default app.
236704326,i am a react beginner but working towards building a production-ready app should i start investing my time in learning how next.js works instead or should i continue to use cra will it be hard to implement analytics tools to track page views will my app not be as search engine friendly etc if i build it with cra instead of nextjs because of cras lack of server-side rendering support who should use create react app other than people using it for teaching react what are the advantages of using cra over next.js other than that it just works?using cra to learn react and later switching to next.js makes the process of building a react app even longer and for that reason its not a very good option imo.apologies for being off-topic but im often confused as to which tool i should invest the time in learning
236662957,this is a consolidation of issues and fixes service workers in cra for general discussion of service workers see issue last updated gmt swi service workers are causing cra to show up when someone hosts a non cra app on the same address:host .pr attempt to address this by auto reloading non-service worker apps swi user sees old app when revisiting a site they must refresh to see the updated site.pr attempts to address by showing a toast notifying user to refresh swi service-worker.js can be cached accidently or by default on some hosts meaning that new versions of apps do not appear until the cache period ends.eventually browsers should force no-cache on service workers but this is only implemented in firefox currently in the mean time only fix is to ensure no-cache is set on service-worker.js sw spec issue firefox chrome pr is a proof of concept how this could be addressed in cra swi browser support is currently patchy different browsers support different specs and there is no polyfills to align browsers things means developers need to be aware of browser differencesthere is currently no fix for this swi odd behaviour for the end users when an app is cached but no data is loaded images dont load etcthere is currently no fix for this developers must know of this behaviour an plan for it due to the fact users arent allowed to fully configure the service worker they wont ever be able to cache api data and images i think jeffposnick).a developer can store data in localstorage and load that initially if offline swi when registerserviceworker.js is updated to fix issues it will not be updated for current users of cra breaking the as long as you dont eject you always have the latest featurescurrently no pr but we could move the logic out of registerserviceworker.js and add it to react-scripts config folder.---------------------------please feel free to add any issues that you have encounter using cra with service workers enabled
236032076,there are a ton of issues about this and after two hours of reading through them all i still wasnt able to get a sense of the state of things it seems that some jest config options are now available please make transformignorepatterns also available.we have a case where we have local libraries that are brought into node_modules but then jest stumbles whenever we import them because it is not pre-processing the react components in node_modules transpiling our components before export is not an option because the constant transpiling every time one makes a change is a serious drag on development.some discussion threw out symlinks as a solution or workaround but another developer on our team sunk many hours into that before finally getting stuck again.there has to be a simple way to make librarya/myreactcomponent go into myapp/node_modules such that myapp/src/mycomponent can import myreactcomponent during tests without any problems.it would seem to be a common use case
234406051,as i just read in cra dont want to add support to sass and less.then i read dan saying:>lets revisit this topic in the beginning of so whats the state of this?i few hours ago i implemented sass and less in a personal project out of cra .i just added a new rule in webpack modules and a couple of dependencies and gual!following this example we should do not deal too much with this implementation really nice in those loaders is that its not necessary to convert sass to css explicitly.so as all loaders do just including the scss file is enough.i read tons of times that you repeat the same question why you guess sass is necessary in react well in my case i dont use sass to reutilize css i use sass to write css as a tree and its useful to define vars that are useful to create a template structure in the site/component.my best example tree view vars cals and imports that can be used to define the whole site styling): sass@import base/colors.scss;.xxxxx width px position fixed right px bottom px width width height width border px solid color-primary border-radius px cursor pointer i.anticon-smile-o color color-primary font-size calc(#{$width line-height width if you think its time to add sass i can create a pr with those chances or at least ill try).if not ok.thank you
234254563,when debugging an ejected script via console.logging different things i found it quite difficult annoying that multiple pieces of this script clear the the console when it detects stdout.istty start.js and react-dev-utils/webpackdevserverutils.js ).i would like to recommend some kind of argument or environment variable to disable that behaviour so that we wouldnt need to eject and modify and clone to simply enable console logging
233433293,need more example for readme.md for use less with create-react-app
232818481,edit issue appears to be with firebase only service workers arent refreshing index.html and therefore new deploys are showing old bundles.this means production websites or really all deployed sites that use a single url/domain can not be updated.pr is a hotfix if needed that just removes the service worker and updates docs to say they have been disabled temporarily.@gaearon timer jeffposnick addyosmani steps to reproduce create-react-app sw-test cd sw-test npm install npm run build cd build deploy with firebase firebase deploy visit site confirm working change app.js npm run build cd build deploy firebase *check website visit site again and no changes shown devtools shows sw is providing index.html and old bundles force refresh a few times no difference delete service worker refresh see correctly updated site. can someone else confirm this is affecting them? i am hoping i am doing something wrong and this isnt affecting every production deploy
231876449,i use create create app for teaching and i dont see the benefit in making stuff more complicated with adding so much advanced boilerplate code.you probably know that service worker wont work on any ios device of all your users and this is not about to change soon maybe never adding service workers by default is about to create very different experiences and bug behaviour depending on the device it also makes it way more complicated to get a create react app to work offline for all platforms please dont turn cra into something like a windows computer where you had to remove aol and other preinstalled stuff before being able to be productive
231117879,regarding this pull request around the improvements to environment variables based on gaearons suggestion i wanted to start a discussion on how to handle a docker-centric factor app-based workflow where environment variables are provided externally at runtime rather than at build time so that the exact same assets can be run in multiple environments.constraints design goals mentioned is its important though to note that cra always produces static bundles and they are expected to work in any environment regardless of server container etc.in the past i have implemented the following two solutions render environment variables into the html and then hoist them into an application at initialization fetch environment variables from a server for example before creating the store and rendering the app with some static content during the initial fetch)the first solutions benefit is that there is no delay before initial render but with create react app dynamically modifying the html file it becomes a little more tricky to implement since you would need to parse or search replace within the rendered html before serving the file.im just wondering if there is a better best way to provide runtime environment variables to cra applications and if we can get agreement on an approach if it can be integrated into the cra pipeline.thank you for all the great work and hoping for something awesome here pray
230928408,react-error-overlay package looks amazing is there any documentation on how to use react-error-overlay independently i am trying to use it in a project bootstrapped with react-boilerplate
230876873,adds support for relay modern relay-compiler relay-runtime andreact-relay are all peer dependencies including the script to runrelay compiler this at least unblocks cra from being able to developrelay modern relay modern does not require a schema for babel this makes the integration process so much easier hopefully we can get this merged but if you think it would be blocked by needing documentation let me know what a general idea of what youre looking for and we can get that added as well
230697288,it would be nice to use workbox instead of sw-pracache for genrating service-worker.js file since it is officially supported by google and has more features than sw-pracache it has also official webpack plugin so integration shouldnt be hard.some more info about workbox is here
230496376,i re-enabled the storybook section and updated the documentation and links.can you please review but not yet merge ?this is because our release is not yet released though this is about to happen expected to be this week).if you have any comments or question just let me know
230267282,id like to confirm the correct way to have cra hmr react now we are on version and using webpack and that all these thoughts are correct they may be useful to others adding hmr. examples have been updated incorporating feedback why hot module reloadadding in hmr changes your application from full page refresh to refreshing just the app.in most cases this will make the page reload faster if you are using external state management such as redux you can have your redux state remain when component changes are made.*note this is not same a component based hot-module-reloading where state within your react application remains unchanged when making changes to your source code hmr will remove any component-based state that is currently unsupported by cra more information see react-hot-loader and status post by gaereon hot module reload without redux index.js js regular importsreactdom.render(
230189639,couldnt resist integrated with our error handling so errors cause refresh on next save x s>this would need a babel transform for now i just hardcoded what it would doonly works if you have devtools installed/enabled
230144978,this adds support for css modules using the explicit file naming convention name .module.css when using css modules class names follow a deterministic convention rather than the standard random hash with the covention directory __ filename ___ classname .given src/components/button/button.module.css with a class primary the generated classname will be src-components-button__button-module___primary this is done to allow targeting off elements via classname causes minimal overhead with gzip-enabled and allows a developer to find component location in the devtools.see issue for more details update th oct we are currently waiting on version of create-react-app to add css module support as it is a breaking change the current release timeframe is unknown.you may use react-scripts-cssmodules to add cssmodules in the meantime this is kept up to date with react-scripts and uses similar version numbers e.g equals you can use it by running npm uninstall react-scripts and npm install react-scripts-cssmodules or in new projects create-react-app my-app scripts-version react-scripts-cssmodules specific questions or feedback i have moved postcss options into a variable but repeated the rest of the style-loader code this meaning repeated code but in my opinion is easier to follow however it could be changed to use less repeated code my regex is amateur is there anyway that the incorrect file could be captured by modules.css or the incorrect file excluded by modules \.css$/ ~~i have been using this configuration in production for a couple months with no issues images of working projectreact
230126676,i suggest adding support for css modules with an explicit filename allowing those who wish to use css modules to do so without interfering with importing regular stylesheets including from external packages. what is css modules css modules will autogenerate a classname with hash to insure scoped classnames this means that you no longer have to worry about clashing classnames or using bem or similar naming convention it does this in the background when css is being generated to quote css modules no more conflicts explicit dependencies no global scope. explicit file name name .modules.css regex css module modules.css$/ not module modules \.css$/ reasoning css modules is widely used has excellent satisfaction according to stateofjs it also allows an easy alternative with ide support from cssinjs solutions and wont interfere with regular css. opt-in only the feature would be entirely optional and a user would have to explicitly opt in by using the naming convention and importing the css file into a js file. gotchas if someone named a stylesheet something .modules.css without it actually being a css module and imported it it would be imported as a css module. pull request pr thoughts
229551563,not an issue but a feature request.imo it would be beneficial for splitting the js bundle into app and vendor files.my app code keeps changing but vendor dependencies rarely change splitting into two files will be a lot beneficial for long term caching.if this interests i will be more than happy to make a pull request for this
228965079,known issues none please report updates published the first canary published another canary that fixes the path issue and disables require.ensure warning published another canary that re-enables parsing of require.ensure published a canary with more legible colors on windows and port detection fixes published a canary with jest fixes stricter module resolution uglify fix and more consistent overlay styling published a canary with fixed npm package more visual fixes to overlays better build messages and smaller post eject code size final call for testing published the last canary with ie fixes. -------today i invite you to help us beta test react-scripts for a few days before the public release.it used to be called but we figured theres enough improvements to make it to create a new app with it run: create-react-app my-app scripts-version react-scripts@canary to upgrade an existing app replace react-scripts in your package.json with react-scripts canary and run npm install or yarn ).there is no changelog yet but you can open the milestone to get a sense of included changes.a few highlights webpack jest code splitting with dynamic import runtime overlay for uncaught errors local and environment-specific env files multiple proxies accidental usage of non-obvious globals is forbidden some jest options are overridable nicer warning and error output you can use a node script as a browser variable only image assets are inlined only tests in src run now some flexbox bugs are autofixed and support for spec is dropped editing the public folder refreshes the page are a few more changes we plan to get into but this should be enough the first public testing. please report any issues you bump into in this thread we want this release to be as solid as possible even though its unlikely well keep it unreleased for much longer.big thanks to all the contributors this will be our biggest release yet
228679952,how can i remove eslint in npm start
227519687,is now on npm.afaik both autoprefixer and babel-preset-env support browserslist in package.json now and uglify-es unlocks targeting es for apps that dont care about older browsers).we should investigate integrating those in a cohesive way
226669246,recap is going to be one of our largest releases in a long time.we have already merged many changes lets recap webpack native es modules support tree shaking yay painful disabled require.ensure crash overlay resolve localhost proxy on windows require proxy starts with or dynamic import support painful whitelist url loader long standing prs we should merge or close networkings docs forking dll close or figure out how to simplify jest needs updated x jest upgrade pr make sure test in src/node_modules work x only tests in src x jest x override jest config via or style lint we should close or figure out what to do with this pr its mainly about enforcing css style from what i can gather which is outside of our philosophy of not enforcing style we can postpone this for a second or third release of but we should comment on it we can largely solve and by implementing host integration the main problem here is that many of our integrations e.g auto reloading stop working when the application is loaded from a different host which is mainly caused by our reliance on window.location if we can make this less painful by an explicit host we should x pwa we need to enable progressive web apps code splitting docs x crash overlay x we need warning support added the most important one x ignore errors that dont come from apps stack x add console.stack to react there is a weird flash when changing from compile error to runtime error if there is a syntax error sometimes theres an overlay too because webpack throws on syntax errors for initial bundle x we need to linkify messages add docs for local env change revert and add more info make it clear youre not supposed to use env for real secrets maybe add an explanation for why we ignore their faq x multiple proxy support next releases some possibly hopefully x require strict module dependence to prevent people from using our internal lodash jest debugging support x multiple env config files static asset inlining speed up build speed warn when importing unsupported files export render we need to take a hard stance and say were not exploring this or start taking some steps towards it i believe this is something we need to address soon mainly because next.js has captured a lot of attention not that this is bad but if theres something we can do to make this better we should e.g multi-entry points external framework integration flow integration webpack plugin figure out what to do with windows currently flow is suboptimal on windows the performance is awful we can only enable this integration on macos for now or disable it all together but i think we should get the pr in so it doesnt stagnate development path serving
222994329,any plans to support relay modern without ejecting in the future
220077670,when is released with i have a feeling well be seeing a lot more of issues like these users have a perfectly legitimate use case and i believe we should handle it.they desire to require a text file or other types e.g markdown other markup and receive raw data there was also a recent issue asking to require js as text and not processed as a module.there are many imaginable use cases for this and have been a huge amount of issues weve responded to with a put it in a export default to remedy this i believe we should in-line assets via fs.readfilesync similar identical to brfs would allow users to require any arbitrary file as utf text or a buffer
218291435,so i have a page in production and some of my clients are complaining that they cant see the new changes unless they completely wipe their cache i understand that the random hash on the js and css files are to prevent caching issues but what about the index file itself what can i do to prevent this file from being cached?thank you
216445414,verified by adding homepage to package.json and confirming that it would display the subpath in the terminal and open the browser with the sub path in the url tested by editing both js and css to verify hot loading works the same as before then verified that if i take homepage back out of package.json it works as intended screen shot at am shot at am
215280975,this issue is a continuation from the twitter thread discussing usage of webpack-bundle-analyzer with cra. webpack-bundle-analyzer can be used either as a cli providing it the stats.json webpack json output and the built files with these we are able to show the sizes of each module as they are on disk show the sizes of each module after minifcation show the sizes of each module after minification and gzip_heres an example i built from a project using create-react-app after first having to eject report.html.zip changes i had to do after ejecting are in this commit heres a gif of that visualization:! webpack-bundle-analyzer-example
213526990,right now i need to eject in order to import graphql files using graphql-tag/loader i would think graphql is some kind of core technology that should be supported out of the box
213502101,this is an attempt to resolve by using the proxy handling of webpack dev server to allow multiple proxies to be added to package.json.supported config options can be found here changes are compatible with the previous method and behaviour of providing a simple proxy string proxy tested the following proxy scenarios proxy as a string expected behaviour is maintained requests that accept text/html always fallback to index.html proxy as an object in the form proxy context target url all matching requests are proxied to the target this includes requests with a text/html accept header it is up to the user to bypass those requests manually in the config no proxy specified in package.json all requests fallback to index.htmlthis change relies on webpack dev server being updated to handle the external websocket upgrade as cra no longer adds the proxy middleware.this is a step towards should be solved by adding a custom oauth callback proxyedit:webpack dev server v handles the external websocket upgrade for all proxies.webpack/webpack-dev-server#please provide any feedback
213076258,i want to be able to pass in multiple proxies in my package.json instead of just one string
212958637,descriptionbug expected behavior npm start should not return a unhandledpromiserejectionwarning actual behavior cschroeter@pc:~/workspace/my-first-react-app npm start test start home/cschroeter/workspace/my-first-react-app react-scripts start(node unhandledpromiserejectionwarning unhandled promise rejection rejection id typeerror listener argument must be a function(node deprecationwarning unhandled promise rejections are deprecated in the future promise rejections that are not handled will terminate the node.js process with a non-zero exit code environmentrun these commands in the project folder and fill in their results npm ls react-scripts if you havent ejected cschroeter@pc:~/workspace/my-first-react-app npm ls react-scriptsmy-frist-react-app home/cschroeter/workspace/my-frist-react-app react-scripts node v v npm v : .. then specify operating system:windows in linux bash shell build creator update to reproduce create-react-app my-first-react-app cd my-first-react-app npm start
212605128,as promised a quick gif demo:! lint-staged uses husky by typicode for the commit hooks and lint-staged by okonet for running stuff on the staged files pretty neat
211988184,this pr adds service worker generation via swprecachewebpackplugin helper code to conditionally register the service worker if the browser supports it and if node_env production a web app manifest and a few additional meta tags to supply metadata which some mobile browsers use during the add to homescreen flow.using a server worker with a cache-first strategy offers performance advantages since the network is no longer a bottleneck for fulfilling navigation requests it does mean however that developers and users will only see deployed updates are only visible on the n visit to a page since previously cached resources are updated in the background a good portion of this pr involves updating the documentation to try to explain this model to developers and make sure that it doesnt catch folks by surprise.fixes fixes cc addyosmani goldhand ianschmitz ryansully who provided comments on a provisional version of this pr
211975188,i think brunch does this if i recall correctly.this is an important feature because people often misunderstand that transitive dependencies arent supposed to be importable.see and for examples
211936273,as seen here
210237174,like proxy in package.json could react-script start also accept the http_proxy or https_proxy environment variables to specify a fallback server during development?it would be as easy as adding a few lines of code jsvar proxy require(paths.apppackagejson).proxyif proxy proxy process.env.https process.env.https_proxy process.env.http_proxy} this is useful in situations like mine where some team members dont use dockers and others do resulting in different proxy urls.im available to create a pr if you deem this acceptable
208629549,adds host and port env variables to react app so websocket can use them instead of window.location.this addresses the issue listed here can be tested by adding a env file to an app with the following content: host=...port= then run the app by visiting if you look at the network requests you will see the websocket is using and not localhost
207974456,got this idea from conversation with nitishdayal on twitter.there are some people who dont feel comfortable with a tool until they know how it maps to a lower level abstraction that is until they know whats happening end to end.i think this is something lacking in our docs right now we dont really explain what were abstracting away and what the overall flow is i remember doing something similar for redux at some point and it really helped people they stopped asking the same questions).i want to have a new doc section that explains what exactly happens when you run npm start and what happens when you run npm run build it should be approachable to somebody who knows how browsers work but arent familiar with the js ecosystem or single-page apps.not as much in terms of technologies webpackdevserver starts but more in terms of the actual flow e.g a bundler concatenates all modules used by the app in a single javascript file it starts a development web server that serves an html page and that javascript file that html page automatically includes a script tag pointing to the javascript file when the page loads that file executes rendering the react application a react application is composed of components anybody wants to help some experience explaining complex things in simple terms is preferred because this will not be a very easy task
207678957,this is only relevant in master which uses webpack if i change src/index.js from jsimport app from app; to jsimport app from app; im getting:
205738023,note from maintainers see for the latest thinking on this the problemsay i have two sibling cra apps foo and bar what is the best practice for sharing a common component baz between the two apps scopeit would make sense to have a sibling folder baz with its own package.json and to use npm link to access it from foo and bar .but it seems that npm link has bigger issues so maybe we should explore alternatives one example is wml which simply watches and copies files buildingeven when npm link works fine the jsx in baz has not been compiled.per this discussion i think we should compile separate modules like baz independently but that will require boilerplate such as babel config cra helps avoid this for full apps but we dont yet have create-react-component to help manage the boilerplate of shared components optimizing for developer experiencethere are a few ways to clean this up but im curious what people think is the current best practice what is the ideal developer experience
203457212,i am trying to exclude some js files from coverage report.i have already added this to package.json jest testpathignorepatterns rootdir>/node_modules rootdir>/path/to/dir testresultsprocessor node_modules/jest-junit-reporter unfortunately files from those dir still appear when i run ci=true npm test coverage
201564253,say you want to publish a react component to npm would be nice to have a scaffold that would get rid of most of the boilerplate yet allow you to take advantage of create-react-app features
200474959,my own path of using svgs with webpack has settled me comfortably with loading svg files as react components via svg-react-loader@next as of time of writing this allows you to treat an svg just like any other react component and renders out inline svgs for example: const mysvg require(./mysvg.svg)const myapp div some components mysvg could also pass fill=#ccc or style={styleobj div renders/ / inline svgs offer the most amount of flexibility in terms of styling animation and manipulating props svgs in the browser are now more supported than ever they are quickly replacing icon fonts as the preferred way to do icons in your app.id enjoy hearing the communitys thoughts on this
199235811,with this pr it is possible to override builtin babel presets and plugins via babelrc or package.json dont forget to install babel-preset-react-app and include react-app preset into your babelrc or package.json babel configuration section.via babelrc js presets react-app stage- } or via package.json js...babel presets react-app stage now is possible to use decorators features from stage preset any new babel features and presets>note if using custom babel with babel-preset-react-app preset you will get warning message if babel-preset-react-app latest version is not range of your local version
199144659,on a project im currently working on were using a file called build that specifies build instructions for our microservices.and due to mac os sierra case insensitivity is an issue so being able to do something like react-scripts build path dist would be ideal in the package.jsonis this possible currently
198453988,read different env configs according to current command start test build read env.dev when npm start and npm test read env.prod when npm run build*by default if custom config does not exist read env variables from env file. dotenv is using for config parsing.not sure about npm test what config file should be accepted
198280702,are there any plans to support lerna by default lerna uses the packages directory to store the packages right now the content of that folder is not transpiled so its not possible to use es code in there it would be nice to have the possibility to use lerna to create a monorepo application with create-react-app ive tried using the src directory with lerna but that conflicts with not ignoring node_modules directory inside the src directory so it gives a ton of lint errors when you do so
198034785,im very pleased with create-react-app thanks for the great work while trying to configure an extra babel-plugin styled-jsx in this case i realised that this is now only possible after ejecting it would be amazing if cra would take a look at a local babelrc like it does with eslint and use that config instead or use it to extend the babel-config that cra has itself in my case this was the thing i needed to do plugins styled-jsx/babel these lines forced me to eject from cra which is a shame really because i really liked the way that i wouldnt need to worry about any other config
196366212,hiim trying to use create-react-app to build a react library but im facing some challenges maybe create-react-app is not the best-fit approach for this and we should create something like create-react-lib project.current challenges stable generated output/dist lib to put in the package.json/index entry option to maybe optionally embeed assets i.e styles)maybe this is not suitable for this project in that case please point me to relevant projects that address this issues./thanks
196298133,in order to facilitate server-side rendering change the production webpack config to package the bundle as a umd module making it usable in a number of environments the modules name is derived from the applications name in package.json .for this to be meaningful the bundles entrypoint must export a function so ive added a basic render function to index.js the existing browser mount must be wrapped in a guard condition to stop it failing in a server environment
196297011,webpack has had its first v release there are a few changes were waiting on x babel-loader x webpack-dev-server@..-rc x x extract-text-webpack-plugin x remove loaderoptionsplugin for prod postcss x x be nice check up on is this affecting us
196128063,hi i have found create-react-app to be a wonderful asset to rapidly setting up and maintaining react apps i found myself however forking create-react-app in order to inject postcss-cssnext to add css variables i know this has been discussed before and rejected since cssnext was considered too unstable to be supported by cra.i feel however that css variables are something that most developers would find useful and nearly essential when designing complex apps i would rather avoid having to resort to a beefy solution like sass or less when future-proof css will work just fine i am also not a fan of css-in-js solutions further i know that facebook itself also uses css variables in some of their react apps.would you be open to reconsidering cra support for css variables
195725422,in the past ive used the web-worker loader in webpack but with create-react-app i get the no-webpack-loader-syntax error.is there another way that you recommend to do this i cant find anything in your documentation about webworkers and it seems there isnt another way to load them in webpack
194873538,proof of concept for work with ejecting yet.both autoprefixer and babel are driven by a config like this in package.json : js browsers development last chrome version production last versions firefox esr not ie currently i throw if it doesnt exist since i could generate a reasonable config by default e.g last two versions for development in new projects and ask old projects to include it during migration in a way this would be configuration but actually sensible one i dont have a strong opinion here though
194658707,it would be great to be able to type eslint into bash and have it run eslint just like it was building as it is it cant find the config file unless i eject is ejection really necessary here
194648750,hi there first of all thanks to all the contributors for this awesome project having all the tools configuration and setup in one place helps tons. create-react-app doesnt have any css linting yet i noticed that there was tentative agreement for further consideration in so i decided to open a pr for this since i need it for a project anyway.ive included the standard config because i dont have a full opinionated stylelint config yet but this can of course be changed.~~ note this depends on my fork of vierons stylelint webpack plugin because the errors were not displaying correctly using watch mode in cra ive opened a pull request on the plugin here vieron/stylelint-webpack-plugin#~~ edit pull request has been merged
194062133,update shubheksha will be working on this please coordinate with her on specific parts you want to help with.now that its stage we can add it.we should also add relevant documentation add a code splitting section to user guide).since we use webpack x for now i think we need but im not entirely sure.todo items here figure out which babel plugin implements current version of and compiles down to require.ensure add said babel plugin to babel-preset-react-app figure out what should happen in the test environment probably need to add some sort of a fallback that turns it into promise.resolve(require(modulename add documentation about using code splitting ship it! let us know if you want to help i wont have time to work on this.please leave a comment below if you want to work on this if somebody is already working on it please offer to collaborate with them if you like dont try to be there first if somebody is already working on some part of this please collaborate in this issue and split responsibilities.im excited about finally having a way to code split js code without webpack-specific syntax!and when we switch to webpack well change to a different plugin or maybe wont need it at all
193904887,based on a previous discussion is a short list of some of what can be done to reduce some of the larger items that increase the overall size of react-scripts excluded are smaller opinionated or rejected fixes currently three versions of acorn are used kb used by espree kb used by acorn-jsx and webpack and kb used by acorn-globals and jsdom if happens the version of webpack required will require the same version of acorn that espree uses an issue has been raised for acorn-jsx to bump their required version of acorn but there has been no response x the latest release of acorn-globals requires the same version of acorn that webpack and acorn-jsx require but jsdom uses an older version an issue has been raised for espree to bump their required version of acorn x the version of recursive-readdir required specifically requires minimatch preventing it from deduping with the minimatch in eslint-plugin-import which normally wouldnt be that much of a problem but yarn seems to put minimatch in the base node_modules folder while placing minimatch in the node_modules folders of babel-core eslint-plugin-import glob fstream-ignore multimatch readdirp and sane meaning the same version of a kb dependency is copied six times over fixed with browserify-zlib packages kb of tests a pr has been filed escope depends on es-map and es-weak-map these two packages along with their dependants d es-ext es-iterator es-set and es-symbol and event-emitter take up kb an issue has been filed on this but escope does not seem to be actively maintained it seems eslint will fork has forked escope for the next version which does not contain the polyfills x istanbul-reports packages a nyc_output folder of kb a pr has been filed jsx-ast-utils packages a yarn.lock of kb an issue has been filed the version of node-notifier currently used by jest required includes a cli that is not used and depends on a framework that is not used elsewhere in react-scripts which is included in jest resolved this
193366252,cra-flow-opt will only run if a flow annotation is seen in an users file x at the first flow file found x write a flowconfig if none exists x run flow-typed install x add some custom flow-typed installs implicit jest behind react-scripts for instance x when a file with an flow comment changes during a compilation x run a flow check x if there are some type errors in flow show warnings x if flow itself crashes show error x refactorfollowup goals x return-code-based success of the command instead of looking for no errors x detect if a global flow installation exists if yes check its version if not equal to cras version show a warning that compilation may be slowed down img width alt=__yarn_start__node src x ensure the first flow status run was done after complete init especially flow-typed x add flow-typed dir to gitignore during the first run x add to end-to-end testingfollowup of a discussion in
193165268,"ive been using create-react-app in conjunction with lerna repos and for the most part its been an awesome experience the one issue ive been seeing is when trying to issue lerna run test commands to test all packages that have a test script since create-react-app defaults to entering watch mode on test it hangs.after some digging it looks like i might be able to set a ci environment variable to disable the watch mode however this does not work well due to the nuances of setting environment variables cross platform.something as simple as changing the default from json test react-scripts test env=jsdom, to json test react-scripts test env=jsdom watch, would allow me to simply turn it off conversely adding an optional no-watch or single-run flag would solve the problem.im happy to submit a pr but wanted to get some feedback first on the internal direction regarding whether this has been considered in the past and the reasoning around the current implementation i get that its a nice experience for the casual user but at the cost of ci and incompatibility with lerna there should be some sort of escape hatch short of eject"
192802875,"hello,more and more npm packages contain es code for now usually features supported by node but i guess it will move to node features once will be unmaintained unfortunately this breaks compatibility with uglify and browsers.the only answer to this is imho to also transpile external dependencies is this supported by create-react-app?im asking because my own build set up is getting confronted to this and im thinking about migrating to create-react-app"
191789320,if you would like to help please see pr is a prototype implementation for which hopefully gets the ball rolling.this is by no means a complete or even polished proposal but simply a wip to track the ongoing discussion in as it unfolds.there is much to be done for dx and message clarity when the error object is unavailable or unparsable errorserrors are captured using window.onerror . window.onerror provides the error object in most all modern browsers chrome firefox ie and safari ref notably support is missing from microsoft edge unverified see here can someone test this please unhandled rejectionsunfortunately there seems to be no standard/proper way to capture unhandled rejection chrome seems to be the only browser doing this exposed via the unhandledrejection event.does anyone have any ideas on how to accomplish this should it be a chrome only feature
191749975,there have been some people asking for server rendering with node.js but what if instead we did server rendering agnostic of the backend?the idea is to create a umd build which exports one function the function takes some arguments and returns a rendertostring result the generated version of this entry point would be very simple but it could be extended by the user to support react-router redux etc they can add these things without ejecting which is nice. jsmodule.exports options reactdomserver.rendertostring(
191217489,any plans to add support for in?ive had previous success with in webpack plugin perhaps this could be integrated into the webpack configuration?given that it increases build time significantly as it makes use of webpacks multi-compiler feature i.e module.exports configa configb instead of module.exports config it would most likely have to be an opt in feature we could look for an in directory that users could drop a bunch of json files into the like so: src/in/ en-gb.json de-de.json the idea that cra would produce an output bundle per locale in conjunction with in webpack plugin happy to attempt a pr if you have no objections
190886549,in addition to src/index.js i have other entry points in my app how do i add them
190589610,see for a discussion which leads to the creation of this issue.i propose adding a new command working name build-dev which watches for changes and rebuild the bundle effectively given the current cra implementation it should execute webpack watch then writes it onto filesystem.the main motivation is an easier integration path with non-node.js dev servers such servers could just serve continuously updating bundle from the filesystem.the only desired configuration options is an output which could probably be specified via a command line argument npm run build-dev output static/www alternative command name suggestions watch build-watch
190589164,update issue is taken by iamx please dont try to finish it first!as seen in it seems like a good idea to do.while we generally dont harcode support for libraries lodash is extremely popular to the point it can deserve special treatment especially given that the plugin is easy to include conditionally and has significant benefits.our babel preset could accept isusinglodash as an option: js presets react-app isusinglodash true it should be false by default.inside the preset if isusinglodash is true and the environment is production we already have an if branch for environments there we should require and include babel-plugin-lodash but not in other cases).in webpack config we should conditionally pass isusinglodash depending on whether apps package.json s dependencies contains lodash of compatible versions.finally after ejecting people who didnt depend on lodash should have presets react-app in babelrc but people who used lodash at the time they ejected should see presets react-app isusinglodash true in it update issue is taken by iamx please dont try to finish it first
190572513,after a long discussion in it seems to me that src/node_modules seems like the best solution for absolute imports.it has the following benefits doesnt rely on symlinks they dont work well on windows works with ides and any existing tooling because it relies on node resolution mechanism if you really want to you can run ln s src/node_modules src/packages and use the nicer packages or any other folder.this issue is a call to help to make this approach the official one we need to document it make jest preprocess this subfolder make jest run tests in it fix any other integration issues we findif you want to work on either please leave a comment and then submit a pr!cheers
187310486,as pointed out in adding a specific section about sass in documentation could help users avoid ejecting in order to use sass-loader .this is simpler in my opinion and more aligned to this projects way of thinking
187290407,adding sass or less support in a project bootstrapped using create-react-app doesnt require any advanced modifications its seems more intimidating than it actually is we dont even have to eject.first install preprocessor of your choice sass seems the most popular weapon of choice at the moment so well use it as an example: npm install node-sass save-dev then in package.json just add the following lines: scripts build-css node-sass src/sass/base.scss src/index.css watch-css node-sass src/sass/base.scss src/index.css w and run them alongside main scripts by adding npm run watch-css to start script and npm run build-css to build scripts start npm run watch-css react-scripts start build npm run build-css react-scripts build build-css node-sass src/sass/base.scss src/index.css watch-css node-sass src/sass/base.scss src/index.css w test react-scripts test env=jsdom eject react-scripts eject as far as im concerned that works using less as well.is that something that would belong in current documentation
185375859,im having a hard time understanding below behaviour and would appreciate any help to pointing me into the right direction.i have a generic class for my api calls: class api static ack(param param return fetch(process.env.react_app_ack_url param param method put headers accept application/json content-type application/json then((response if(response.ok return response.json else console.log(ack failed response.statustext catch((ex throw new error(fetch failed ex in my api.test.js i have a following code import api from api;describe(api function beforeeach(function window.fetch jest.fn().mockimplementation promise.resolve({ok true id it(ack function api.ack(foo bar).then(response console.log(response this is never printed expect(response.id).tobe always pass gets ignored regardless of what i set the response.id in promise.resolve({ok true id expect(response.id).tobe or expect(response.id).tobe(abc always pass
184265273,solves introducing the possibility to specify the public_url env variable while running npm run build .with this pr the public_url in static assets and the output.publicpath variable set in webpack configs follow the following behavior homepage specified in package.json public_url not set only the pathname is used from homepage as it is right now public_url set homepage might be set the full url specified in the env variable is used
183633894,i would like to configure the coverage threshold from jest to be able to launch jenkins from ci with a coverage.can we have support for this in create react app what is the most relevant overriding some part of the config i can do a pr fo it keep it like this and i have to override the whole configuration with config from package.json
183217218,hello!love this tool however im using it to create a component library that i want to publish on npm and am running into issues accessing the components after ive installed my package.process: npm run buildnpm publish locally if i get them from the main file it works fine as expected)main.js export default as button from modules/button;export default as navicon from modules/navicon;... app.js import button navicon from lib/main; but after i install the package and import the components as shown above from package-name they are always undefined .thoughts into the best practice for this
182634873,yarn is a new fast reliable and secure alternative to the npm client.this pull request adds support for yarn in create react app see discussion in in the create-react-app command we try to install packages using yarn if yarn is not installed we use npm instead in react-scripts we detect if the project is using yarn by checking if a yarn.lock file exists if the project is using yarn all the instructions are displayed with yarn commands and yarn is used to install packages in init and eject scripts
182317324,released yarn a faster alternative to the npm client can create-react-app detect when yarn is installed or install yarn for faster app creation
182265932,imagine package.json like this js browsers development last version production last versions the format is the same as browserslist we would use this information both for babel and autoprefixer .autoprefixer already supports this format of browser configuration.we could teach babel-preset-env to honor it too or we could write a helper that translates browserslist to its target .this would solve with some optional configuration.it would make rebuilds faster and also make output less mangled without introducing sourcemaps helping work around
181779858,while cool i already see what to open in terminal i dont need script to open it for me i restart the server often and end up with multiple tabs in browser opened every time i start server i loose my terminal context and my flow becomes npm start tab away from the browser open file to edit in terminal switch to browser againcould we disable auto-opening of browser window or at least in non-interactive mode
181708499,hey there i cant run with success the npm test command: npm test react-scripts test env=jsdomdetermining test suites to run node fsevents.framework fseventstreamstart register_with_server error fd_register_rpc null node fsevents.framework fseventstreamstart register_with_server error fd_register_rpc null events.js throw er unhandled error event error error watching file for changes emfile at exports._errnoexception util.js at fsevent.fswatcher._handle.onchange fs.js::)npm err test failed see above for more details environmentrun these commands in the project folder and fill in their results npm ls react-scripts react-scripts node v v npm v operating system macos sierraany idea
181468513,descriptionhow the env file and imports should be setup for the project correctly as currently the build is breaking expected behavior add env file with config in root npm install save dotenv import dotenv using require(dotenv).config or es syntax in index.js file consume using process.env.config_name across application actual behavior
180460861,support for react native for web apps was added in and it enables building cross platform react native apps for the web with create react app.however creating this kind of apps with create-react-app is not as straightforward yet as creating web apps to create a cross platform app at the moment you need to initialize a react native app react-native init initialize a react app create-react-app in a separate folder and then merge the folders and package.json files manually.being able to bootstrap a cross platform app directly with create-react-app would make this a lot easier.to create a cross platform app one would simply run create-react-app react-native this would do following things as usual install react-scripts from npm run react-scripts init react-native which would install react react-dom react-native and react-native-web as dependencies bootstrap a react native app with react-native/local-cli/cli.js like react-native-cli does this is equivalent to our react-scripts init and this way its always up-to-date with rn copy files from a modified version of our template that uses react native components and styles add the local react-native packager start script in addition to our usual scripts to package.json .an app created by react-native init currently looks like this: android/ios/node_modules/.buckconfig.flowconfig.gitignore.watchmanconfigindex.android.jsindex.ios.jspackage.json an app created with create-react-app react-native would look like this diff android ios node_modules public favicon.ico index.html src index.js web entry point buckconfig flowconfig gitignore watchmanconfig index.android.js index.ios.js package.json readme.md additionally we should also add support for web.js file extension to our webpack module resolution so that if filename.web.js exists it will be used instead of filename.js allowing for web specific code to be written the same way you can with android.js and ios.js extensions in react native for consistency with react native it might be nice to move the index.js file to the top level this would also be more agnostic to different folder structures such as packages folder however i think that change should be considered independently of react native support discussed in this issue._i would be interested in working on this if we want to support it in create react app
180405660,ive been using cra for a few weeks and since the beginning im looking for a way to tweak eslint rules.do you have any plan to allow easy customization of eslint rules
180054980,"hi,i would love to have some anylyze script that would print out size for individual package bundled with webpack something like i read here"
179798389,hi i thought about adding support for staging builds i am not sure if this requires ejecting though or could be a feature of cra.our use case is that we create staging builds to deploy to our staging servers this allows us to debug the app in a production like environment but with the benefit of non-minimised code including proper sourcemap support and still includes the development warnings and notifications as well as devtools support.it can look very similar to webpack.config.prod.js (webpack.config.prod.js but with changes to l-l and removal of webpack.optimize.uglifyjsplugin
179496977,this is likely to cause some controversy so id love to hear the arguments against doing this.i want to enable red box on any javascript error in development similar to the proposal in when an uncaught exception is thrown an error is shown full screen similar to our syntax overlay it shows the error message and the stack the full-screen message can be dismissed by pressing escape in case you still want to interact with a broken app the error is also printed in the console like before.we can use although id prefer to have full control over this box in our monorepo to quickly patch bugs and improve the output.why i want to do this react is currently not tolerant to errors thrown inside components its internal state often gets corrupted by this so we want to surface errors early and prominently we already do this on react native to great success in cra we control the environment and we can do this this is a part of my plan to bring hot reloading to cra questions how to capture all errors with stacks in development does window.onerror provide error objects in modern browsers now what to do about unhandled promise rejections ideally we want to surface them given how common this problem and misunderstanding is what do do about errors inside react that accidentally get caught like even if the code is technically valid react just doesnt support this pattern any error inside setstate or reactdom.render is going to mess it up we could monkey-patch them to report errors or add some hooks in react itself to surface them.feedback and thoughts welcome
179059843,fixes fixes fully fixes we dont log anything now and dont try to reconnect).some screenshots:! screen shot at shot at
179050489,weve been using lerna in create react app and i really like its approach i think we should support a similar workflow even without lerna itself for the absolute paths feature.i imagine it working like this in addition to src you can create a special top-level folder called packages inside packages you can create folders like app stuff lol and they all see each other so you can import things from app/whatever.js or lol/wow.js you can also import any packages from src but not vice versa the entry point is still src/index.js we wont add any magic handling that breaks node resolution mechanism instead whenever you npm start npm test or npm run build we will run a utility that creates symlinks from node_modules of the root project to every folder in packages it reports a hard error if there is a conflict this means the authors can add server rendering after ejecting without scratching their heads and that all the tooling assuming node resolution mechanism keeps working. package.jsonpublic/src index.js can import app/banana.js or harry-potter/wand.jspackages app banana.js can import harry-potter/wand.js harry-potter wand.js can import app/banana.jsnode_modules app packages/app harry-potter packages/harry-potter other-deps am i missing why this would be a bad idea
179031078,add instructions on how to add storybook to the user guide.i also mentioned a bit of information about benefits of using storybook.related to
178696156,ive been thinking about this for a few weeks and i have a solution for static assets that satisfies me.it is not exactly what we discussed before so please bear with me and give it five minutes problemcurrently the only way to use an image or another resource is to import it from javascript.this works really well for most use cases because webpack takes care of raising a compilation error if the file is missing adding a content hash to the filename so if file changes browser cache is busted.however there are a few problems with this approach.let me group them into a few buckets root-names some files e.g favicon.ico or manifest.json must exist at top level default approach of putting them into static and adding a content hash doesnt work for them and we have to add exceptions any-attributes html needs to be able to refer to asset paths inside any attributes for example some meta tags may want to refer to an image url in their content but we cant be sure which ones dynamic-files sometimes you have hundreds of image files that rarely change and you want to do something dynamic instead of making hundreds of imports skip-bundler sometimes you really want to load some js or css independently of the bundler for example to show a spinner or to use a script that somehow breaks webpack means we need an alternative way of including some assets into the build constraints prod-works if it works in development it must work in production too homepage user may specify a custom homepage in package.json and we should respect that routing user may use client-side routing and app may be served from an arbitrary subpath secrets it should be obvious to the user which files or folders will end up in the build output pit-of-success there should be one relatively obvious way to do it prior solutions implicitly serve everything in developmentthis is how it worked prior to it wasnt intentional but webpackdevserver defaults to this behavior.this means img src=/src/logo.svg or link rel=shortcut icon href=/favicon.ico happened to work in development however once you compile them with npm run build the links would be broken because module system knew nothing about those files.verdict solves all problems but violates prod-works auto-detect assets in htmlthis is the current solution that was added as a stop-gap measure in any link href attribute is being parsed and relative urls like favicon.ico get processed through webpack.verdict does not violate the constraints but also does not solve root-names unless we keep an extensive whitelist json files make it nearly impossible to keep a whitelist like this because they should be treated differently depending on whether theyre imported from html or js and webpack doesnt support this similarly any-attributes dynamic-files and skip-bundler are unsolved introduce a static folder and serve itthis is the approach described in if an additional static folder exists it is served under static and is merged with build/static on build.verdict it does not solve root-names unless we merge static directly into build output however in that case for something to be served from static youd have to create static/static which is confusing and violates pit-of-success it also violates pit-of-success because to refer to something youd have to use static paths in your html but to many people this would imply that src or img would work the same way most importantly it violates homepage because there is no way for us to fix static path to have the right absolute prefix without parsing html and applying some brittle heuristics it would also be confusing that static paths get auto-fixed in html while other paths are kept intact finally if we proposed that user types relative static in html instead it would violate routing proposed solutionthere is a new top-level folder called public we move index.html and favicon.ico there.we introduce a new concept called public url it roughly corresponds to public path in webpack.it is already configurable via homepage field in package.json but now we also expose it to the user.in html html in javascript jsrender escape hatch normally youd just import them const src process.env.public_url}/img/team_/${this.props.teamid}.png return img src={src alt=team only files inside public folder are accessible by public url you cant refer to things from node_modules or src the public folder contents gets merged with the build output.lets see how this proposal addresses each of the problems and constraints addressed problems root-names some files e.g favicon.ico or manifest.json must exist at top level default approach of putting them into static and adding a content hash doesnt work for them and we have to add exceptions public folder you have full control over how to call your files any-attributes html needs to be able to refer to asset paths inside any attributes for example some meta tags may want to refer to an image url in their content but we cant be sure which ones public_url you have full control over attributes dynamic-files sometimes you have hundreds of image files that rarely change and you want to do something dynamic instead of making hundreds of imports expose process.env.public_url so you can do that now skip-bundler sometimes you really want to load some js or css independently of the bundler for example to show a spinner or to use a script that somehow breaks webpack since we dont process files in public folder with webpack this will work addressed constraints prod-works if it works in development it must work in production too.the public folder gets merged with the build output so references both from html and js will keep working in production homepage user may specify a custom homepage in package.json and we should respect that.both public_url and process.env.public_url take homepage into account as they directly correspond to publicpath used by webpack routing user may use client-side routing and app may be served from an arbitrary subpath.both public_url and process.env.public_url provide safety against that as they are absolute and know about homepage secrets it should be obvious to the user which files or folders will end up in the build output the mental model is simple only public files are merged with build output pit-of-success there should be one relatively obvious way to do it.you cant accidentally refer to a file in src or node_modules because it will not work we show two preferred methods out of the box import ing images in app.js and using public_url in index.html using process.env.public_url is an escape hatch so we will only use mention in documentation for people who need it.---overall i feel like its a solid explicit solution and i intend to release it as part of
177762206,it is not common knowledge that you can fork react-scripts publish your fork and then do create-react-app my-app scripts-version my-react-scripts-fork .this can be useful for customized setups especially if you want to merge upstream updates once in a while and with something like it might not even be painful!we should document this help welcome
177609282,i know we said we dont offer any configuration but...if create react app had a plugin system what would it be like can you briefly describe build tooling plugin systems that youve used and liked in this thread?if it was supported what would you build with it
177602289,im getting a bit tired of extending our whitelist like in i think we should have a catch all loader that uses file-loader for any unknown extensions.this makes sense because its easy to explain if you import something that isnt js or css it becomes a part of the build you get its filename and can do whatever with it.i think dralletje planned to look into this
177538275,here is a first pass at support for relay in create-react-app from maxwell-oroark and me this is issue this pull request works for both local development server and for builds i have tested following the contributing.md guide both with npm start and npm run create-react-app my-app for instructions on how to get relay going refer to template/readme.md.there are some todos outstanding test in eject mode support graphql-config instead of just an environment variable for react_app_graphql_url better formatting on error messagesplease review and let me know your thoughts
177469424,im working in an application with lots of nested directories and js files.sometimes after i modify and save the file it simply does not update or rebuild i have to stop the process and restart it.whats the solution to this
176851799,this is something lacker was working on before create react app that project got shelved but i think we could revive it in some form now.the idea is that instead of creating a project you just start with a single file that is the root component app.js jsximport react from react;export default function app return h>hello
176739576,should walk you through installing the new react router v and point to its quick start which contains an example ready to be pasted into app.js
176726903,"hey folks,thanks for create-react-app im new to the world of react and overall ive had a breeze getting set up im a bit puzzled on deployment still so i thought id open an issue to clarify these instructions in the how-to recipes section as suggested here i have followed deployment on heroku and successfully deployed a backendless react app on heroku i have followed integrating with a node backend and got it the client and server working together locally.but i cant get and working together i.e a react client node server working on a single heroku app. github repo that repros the issue this is a clone of the integrating with a node backend example with a few changes to get it to partially work on heroku explained in detail in the readme. questions i realize that i could deploy separate heroku apps one for client and one for server and do the cors dance to get them to talk to each other is that what people usually do for deploying if so whats the point of these instructions if you cant actually deploy with that setup assuming that there is a way to get a node server and client server working on one heroku app heres my github repo im trying to deploy can someone take a look at the repro instructions and see if im approaching this the wrong way would appreciate any help thanks"
176507693,hey there im considering dropping my existing build system in favor of create-react-app but there are a few features that i would need at some point ill likely need to fork but until then im curious if any of these features appeal to you enough to open up a pr absolute importsin a large codebase relative paths can get really annoying and make it hard to determine where files are being used id like to suggest aliasing the project name to the root of the project that way you can write something like import env from create-react-app/config/env and if you want to find out where this file is used its a simple find-all query for the file path babel-polyfilllooks like this project isnt using the babel-polyfill any reason you opted to use a variety of other polyfills instead stage presetsimilarly is the any reason this project is using a bunch of babel plugins rather than just using the stage preset postcss variables importswhat is the preferred method of sharing css variables amongst files my current solution is to import a variables.css file that doesnt generate any css so long as autoprefixer is prefixing for a browser that doesnt support css variables im not sure this is the best solution since eventually this will result in duplicate css once browsers support css variables but i dont want to rely on magic globals either stylelintany interest in adding stylelint as a postcss plugin configurable environments feature flagsid like to be able to run the application from the cli specifying the node_env and/or feature flags that use the define plugin something like node_env=replay npm start which would let me start up the app in development mode with my replay devtool so i can run through various pre-recorded redux scenes deploy elsewherewere deploying our stuff to s given this is a zero-config build tool im not sure how adding an s deploy script would work how to build component library package?suppose i have a bunch of shared react components how would i build this package so that i can publish it on npm and require it from another project the fact that babel isnt parsing node_modules means that we need to build a distribution file but we also shouldnt be minifying or hashing the filenames and we also dont need an index.html file any ideas how we could outfit this tool to work for react component libraries zero-configuration configurable build toolthis all leads me to thinking that maybe the right way to go is to have a configurable build tool with some zero-configuration defaults how to i set the eslint config flowtype config stylelint config babel config i dont want to rely on a babelrc or something that i have to copy into all of my projects ideally i could create a package called chets-build-system which depends on create-react-app-core and configures it with my custom configs the create-react-app package can simply have a set of sane defaults but doesnt necessarily have all the feature i want
175273992,we should provide/document a way to do this support for this landed in node
174968572,the custom environment variables feature.----- update february we devised a solution for runtime config on heroku create-react-app-buildpack now supports runtime environment variables by way of injecting values into the javascript bundle at runtime this is still an open question for other runtimes and deployment techniques.-----this feature leverages webpacks defineplugin which is explained as global constants which can be configured at compile time.the issue is not all configuration should be compiled into an application that are stable between environments dev staging production of an app make sense to compile-in version number commit sha/number browser support flagsthings that change between environments would be better provided dynamically from the current runtime urls of an apis may change for each environment secret tokens may change for each user or request)ideally a bundle could be tested in ci then promoted through environments to production but compiling all of these values into the bundle means that every promotion requires rebuild.ive used node to serve single-page apps in the past with a base html template that gets environment variables set via inline script at runtime even used a server-side redux reducer to capture process.env values into an initial state.now im trying to find a good solution to the conflation of runtime configuration values being compiled into the bundle. create-react-app is clearly focused on producing a bundle that can be used anywhere.is this project open to solutions/hooks for injecting runtime variables or is this wandering into npm run eject territory
173648217,feel free to try and give feedback about this pr by using: create-react-app my-awesome-typescript-app-folder scripts-version=git://github.com/mattiamanzati/create-react-app.git#typescript-support this pr shouldnt be merged yet see the discussion below! good news everyone!first of all thanks to everyone working on this great package its allowing newcomers to enter the world of react with just a few command line commands!being a typescript fan and after seeing some request about typescript support i tryied to give it a shot should we merge this or create a separate scripts packages not everyone uses typescript you should p so this pr will just add other stuff to npm install to users and if its not needed it will just increase the npm install time of the create-react-app on the other side this could became a separate npm package like typescript-react-scripts and be installed using scripts-versions but this would require to fork or spoon all the current configs for webpack babel etc what do you think would be the best solution awesome-typescript-loader instead of ts-loader i have used this because i like the idea of typescript sources made es compliant by babel at the moment typescript doesnt support that natively so i decided to go with this route and let all pass through babel babel.dev.js contains non-babel configs babel.dev.js uses cachedirectory config which is a babel-loader and not a babelrc config option thats why inside typescript.dev.js i have to monkey-patch that config and remove the cachedirectory option maybe we should consider moving that option to a babel-loader.dev.js file and then include the babel config find a better typescript sample i had no idea about that so i ended up writing a react component that simply tells that you can also write typescript we should find a simple example that uses interfaces in order to explain the advantages of typescript on bigger codebases tslint confing and eslint confing are different right now we should dive into create a unified config between the two system writing a hybrid js ts project would end up in tslint blaming you because its settings are different this usually happens when you have a large codebase and slowly migrate to typescript react typings tsconfig.json to avoid adding another dependency i decided to simply include the react and react-dom typings along with their typings.json file however this means that we need to keep it up to date so should we consider adding another dependency and run typings install react react-dom save how to handle tests? right now tests will fail since it will attempt to test the tsx file shouldnt we run the test on a compiled file version unfortunately i dont know much how we could setup that.~~thats all thanks for your time and suggestions
171946445,hi is it possible to use relay with create-react-app without ejecting project and messing with webpack configuration?i get the following error in the console: invariant.js uncaught invariant violation relayql unexpected invocation at runtime either the babel transform was not set up or it failed to identify this call site make sure it is being used verbatim as relay.ql . i was looking for solution and it seems to be problem with lack of relay.ql transpiler in the babel configuration but all these projects were not created with create-react-app cli from what i know its not possible to mess with webpack configuration until i eject a project
171028169,i think i have suggested this before but i never saw anything that convinced me that this is a bad idea.it is great that for production that ie and other older browsers are supported but just for development i like to have a super fast rebuild and i like to debug code that is close to my own source.so why would we enable all of the plugins of babel-preset-es if the browser we develop in support es syntax natively i think the only exception is if you develop in ie on windows but i think a good estimation would be that of the people develop in chrome firefox edge or safari.now it happens to be that those browser support es so i think it would make sense to not use babel-preset-es in development the only plugin you need is babel-plugin-transform-es-modules-commonjs as the import spec is not yet finalised and implemented in browsers.i have been trying that in an eject and it seems much faster on larger apps and because the lack of source-map support it does help with understanding where the error is located
170744746,cc ryanflorence ayrton gaearon jquensethis was intended as a dumb twitter joke about create-react-lib but theres actually something to it.scaffolding react libraries hits the same point points as scaffolding react apps however in one way its worse library developers often have multiple library packages.getting a minimal library scaffolding up is pretty easy if youve done it a few times but getting a good library scaffolding is time-consuming if you want to include all of umd build unminified and minified es module build coverage reporting on testsits just as difficult to keep stuff from going stale i think i finally upgraded the last few of my libraries to babel but im not really sure and its a fair bit of work every time to make sure i remembered to set everything up appropriately you can start a project by copying the last thing you did but its harder to keep stuff up-to-date.given that it could be quite useful if some of the core functionality in react-scripts could be made reusable in such a way as to offer a create-react-lib where the main benefits would be reduce the amount of extra work required to get really good tooling set up just update a dependency to freshen tooling dependenciesi havent fully thought through how this would work but i wanted to write this up real quick to lay out the pain points that i hope we can use functionality from here to resolve
169454442,this seems like a nice thing to do since the user will have to deal with this after ejection.also serves as a good reminder for us in the future for why we made certain choices
169273404,poc for issue sh npm run create-react-app my-app cd my-app vim flowconfig copy template from npm start instead of vim flowconfig you can do wget too.sample app.js flow import react component from react;import logo from logo.svg;import app.css;math.pow();class app extends component render return div classname=app div classname=app-header img src={logo classname=app-logo alt=logo h>welcome to reactsrc/app.js
168753067,i was wondering if better flow integration is something you guys consider.flow finally has windows support often notice flow issues too late when i work on a create react app the eslint issues are always in my face at the terminal at the console and in my editor webstorm so i never miss out on them.however for flow issues i have to run flow manually sadly webstorm doesnt show any flow issues and also this project doesnt show any flow issues to me sometimes i find a bug after quite some time and then i notice that flow would have already seen this for ages but i just forgot to run flow.i would love it if the flow issues are also seen in the terminal and console
168487319,this comes up fairly often.unlike react router it is not immediately obvious how to add react bootstrap because it needs its own css so i think its worth documenting this here even though we wont document adding e.g the router because this is a super common use case for beginners
168306013,for example i have the following structure src|--img logo.svg||--containers app.js instead of doing import logo from img/logo.svg inside app.js it will be nice to do import logo from img/logo.svg and it will be easier to read if i have a component placed in deep directory like components/sidebar/index.js
168193165,this pr is in no way feature complete and is just meant to start the discussion reference pr uses the pundle module bundler instead of webpack whats working hot reloads everything js json what needs some work non js requires eslinti will be implementing the missing plugins for pundle as we make progress on this pr whats the benefit?well documented and maintained software that has extremely fast bundling and hot reload speed compared to webpackcc gaearon
168056318,this adds jest as a default test runner with an example snapshot test as announced in the jest blog post the generated snapshot for the example looks like this jsexports app renders a welcome view div classname=app div classname=app-header img alt=logo classname=app-logo src=test-file-stub h welcome to react h div p classname=app-intro to get started edit code src/app.js code and save to reload p> ; this integration is the simplest test runner integration i can think of and requires no configuration in the project itself the repo internal configuration mirrors some of the configuration from the webpack integration tutorial understand there are many opinions in this space and many people have aspirational goals as to what a test runner and framework should be in reality what we have found at facebook is that when it is hard to set up a test runner or hard to write tests people simply dont do it this is why jests philosophy is to provide an integrated experience that is well set-up and performant by default.further i believe that snapshot testing and the react test renderer will greatly influence how people write react tests and im excited for the possibility of other test runners integrating better with this in the future dom testing should be left to webdriver or other end-to-end tests in a test environment regardless of the real rendering target there is little value in rendering to a fake dom this is especially true for non-web rendering targets
167682273,it is a nice escape hatch ref verified by going through the entire flow in all three states i.e node_modules development and ejected with npm start
167602431,tl;dradd a field to package.json that tells eslint flow other tools where to look for configs.useful for zero-conf opinionated packages like create-react-app and standard js eslint will look for react-scripts/config/.eslintrc flow will look for react-scripts/config/.flowconfig configurator react-scripts ---as a community weve mostly solved the problem of nested extendable configuration eslint does this really well babel also does this.however i think that this project gaining k stars in days proves that there is a market for non-configurable opinionated tools hiding dependencies from the user id like to give props to standard for being one of the first tools demonstrating this is a viable model it doesnt matter whether i agree with its choices).the problem im starting to see is that many amazing tools like eslint and flow dont currently play very well with this approach out of the box problem eslinteslint is very flexible but if you want ide integration you need to tell it where your config is.this is why our otherwise zeroconf package.json now has to look like this js name my-app version private true devdependencies react-scripts dependencies react react-dom scripts start react-scripts start build react-scripts build eject react-scripts eject eslintconfig extends node_modules/react-scripts/config/eslint.js yes one extra field is not a high price but it is already a bit frustrating that we have to hardcode eslint there we would like to treat it as an implementation detail to the extent that it is reasonable e.g eslint-ignore comments are fine but putting paths to configs into users package.json is annoying)also it doesnt even solve the problem completely because eslint will look for plugins relative to the project root so any transitive plugin dependencies wont be discovered with npm or in some cases admittedly not likely with our tool with npm you can find the discussion about this in eslint/eslint flowflow poses a similar problem for us although in a more unfortunate way we cant even tell flow to look at a different config when you run flow init it creates flowconfig in the project root and thats it this is reasonable if the user plans to change it which seems necessary for lib integrations but we cant even influence the default generated config in any way and unfortunately for a number of reasons the default generated config wont work for create-react-app .if you want flow to work you need to replace the config generated by flow init with this one ini libs ./node_modules/fbjs/flow/lib options esproposal.class_static_fields=enableesproposal.class_instance_fields=enablemodule.name_mapper=^\(.*\)\.css react-scripts/config/flow/cssmodule.name_mapper=^\(.*\)\.\(jpg\|png\|gif\|eot\|svg\|ttf\|woff\|woff\|mp\|webm react-scripts/config/flow/filesuppress_type=$flowissuesuppress_type=$flowfixme and we dont want to do this automatically because many people dont currently use flow our philosophy is to not generate a ton of configs in the user folder we want the config to be compatible with the current version of react-scripts so if we generate flow config before the person actually starts using flow by the time they start using it their checks might fail because something changed on our side solution?i dont know if there is a nice solution to this but here is my proposal this is how i want package.json to look js name my-app version private true devdependencies react-scripts dependencies react react-dom scripts start react-scripts start build react-scripts build eject react-scripts eject configurator react-scripts } eslint would then use react-scripts/config as the base directory for its regular config/plugin search mechanism so it would look for eslintrc package.json etc in that directory and resolve plugin modules relative to it since eslint wants to stay configurable it will also look for overrides in the current folder and use its regular override mechanism but this would just add configurator as a first-class citizen for providing configuration.similarly flow would look into that project when running flow init and if it finds flowconfig in react-scripts/config it would use that instead of its default config this gives us a way to own the default configuration even if the user is on their own in the future flow could support merging configurator}/config/.flowconfig with local flowconfig similar to how eslint would work if it implemented this feature.this would benefit an ecosystem by fostering development of opinionated presets of preconfigured tools if youre a tool honor configurator in package.json and try reading configuration from configurator}/config in addition to your normal lookup paths if youre a preset author you can fork react-scripts or any other configurator make some changes to it and keep it simple to adopt your preset just swapping configurator is all end users need to do.what do you think am i missing something
167592547,"note from maintainers for people coming to this thread laterif you use mobx or a similar library you dont need decorators they are just syntax sugar in this case learn more here is why we dont include them can not use library like mobx observer,@observable).to fix this babel stage babel transform-decorators-legacy plugin"
167577118,what do you think about removing the proptypes in the production build to reduce the bundle size using babel-plugin-transform-react-remove-prop-types already prepared a fork so if you think it is a good idea i can submit a pull request
167433480,its under active development and from what ive heard most bugs have shaken out by now id like to see a pr porting this project to webpack so that we may compare them and either to switch to it or file issues against it id expect such pr to use webpack s native support for es modules.if you plan to work on this please dont forget to comment here so we dont have duplicate prs
167280008,currently in the built index html the js css paths are absolute html
167195324,generate an app that supports typescript instead of es or provide a simple migration path through documentation.another option is to simply add the typescript loaders to the webpack.config.*.js configurations then the user can rename the files and clean up the minor syntax differenceslove this tool i avoided react because of the tooling not anymore thanks
167130904,this would be helpful to set extra options to the config like publicpath and additional loaders as well as additional environment variables i have a habit of using one for the public path).one similar project reactpack that i used implemented this and i found it quite useful they use webpack-merge if i am not wrong for merging the webpack configs
167112567,i think one of the best parts of something like this is that typically complex things to setup like hot reloading just work out of the box it brings those advanced workflows to everyone.hot reloading is such a crucial part of my dev experience and this project could expose it to others the only problem is that react hot reloading doesnt work all the time so i dont know if that is too confusing to beginners.i havent looked at how this project actually works yet but i cant think of any reason why this wouldnt work just automatically include webpack-hot-middleware in dev mode add the right entry point add the right babel transform etc it can be completely hidden from the user
167091199,an important target group for this app imo are beginners and prototype builders from my experience both these groups would benefit greatly from having simple test infrastructure bundled with this starter from my own experience i usually have a script.js that id include into the main module but thats pretty hacky until i finally setup whatever flavor of test infra is popular the value i get is from being able to write code thatll run on every edit-save separately from my app but that later morphs into a unit test suite or so on for beginners theyd build their app but write tests for smaller parts of the app theyre building while learning to write tests for their code to be clear im not advocating any specific framework/suite/assert libs id just like to be able to run even a if(true throw new error script on every change.thoughts?thanks for the great tool
167087382,note from maintainers we now have official sass integration documentation be nice to include css compilers such as sass less stylus or even css modules etc
166457020,lets wait until somebody asks before implementing but i think a vendor folder that just gets copied into the output could be a useful escape hatch for example if you have a global script that isnt umd-friendly you want to have some way of importing it with a vendor folder you could just put it there reference it from index.html and read from window in your bundle
