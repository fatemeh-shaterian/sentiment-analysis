issueId,body
342667499,we are currently working on the next major version ghost what can you expect in ghost we will ship the final version of knig our new edtior will officially announce dynamic routing beta what will break? edited :we only introduce very minimal breaking changes for themes and the private/public api we have to introduce very minimal css breaking changes because of knig as always gscan will tell you what you have to adapt in your theme minimal changes for the mobiledoc/html structure more details will follow we will rename the amp field this field was abused to fix a bug with disqus comments to comment_id that means you will no longer receive the amp field via the theme/public/private api.furthermore we will release a demo draft blog post soon this draft post will use knig beta on the one hand the draft post makes it possible to look at all the new editor features and on the other it will show you if your theme will break in ghost deprecations in the most important deprecation in ghost will be the usage of single author features we have introduced multiple authors in a detailed blog post about the feature will follow asap how will the migration look like?in we made use of the importer/exporter strategy there was no automatic migration path because we have introduced so many breaking changes e.g objectids database encoding utfmb we renamed so many database fields a new config system etc etc this was a big overhaul of many components.this time we will use knex-migrator to migrate your blog from to that means with the help of the ghost-cli the migration will be much easier and mostly automated the most important manual step will be to check that your theme is compatible with ghost what if my blog is still on lts?we will disallow migrating straight from lts to you first need to migrate your blog to we will explain everything in a new migration guide on when do we ship when its ready
317151809,refs yaml settings routing re-write url service the what and why of dynamic routingghosts routing has always been almost entirely static and hard-coded the only config weve offered is the option to add dates to permalinks but that setting is probably my least favourite part of ghost people close to the project will have heard a lot about a mysterious feature called channels which was an attempt to expose more configuration around lists of posts this has been working behind the scenes but we havent been clear on how to expose the functionality apps config ui?early this year we sat down and rethought routing from the ground up with a view to answering the following questions how can we make it possible to solve all the common routing use cases how do we expose functionality to our users how does this fit in with apps and where the fuck do channels fit into all of this?top common use cases we want to solve custom home pages rendering a taxonomy at a non-standard url e.g tag/recipes category/recipes customising post collections e.g removing posts with a certain tag or using a different urlthere are main problems we have with trying to reach these use cases how to make routes enumerable and configurable ability to generate sitemaps and other features that need to know about urls rather than routes resource url way binding get resource from url get url for resourcewe think we have the answers however the theory is never quite the same as the practice this issue represents our current thinking at the time of writing and is very subject to change whats coming?in we added the ability to customise ghost through yaml files that live in content/settings the first file that will live here will be routes.yaml and this will be the gateway to all things dynamic routing this solve the configuration problem.the solution to everything else is the introduction of a url service and a huge rewrite of all the code that generates content for ghost blogs beta goals in the first beta version by editing content/settings/routes.yml it will be possible to define a custom route that renders a specific template define a custom home page change the location of the standard collection of posts e.g so they all live at blog change the url for taxonomies e.g tag/:slug category/:slug customise the main post collection v has severe known limitations define new collections v has severe known limitations once the first beta goes out we will be looking for people to test their routing use-cases at that point well publish some documentation on how the default routes.yml file is structured and how to define custom routes and collections within the limitations tracked tasks x yaml settings x url service rewrite x dynamic sitemap working x rework url utility x routing re-write x render if url service is processing x resources have full way binding goals this issue will be closed when we achieve the following x ship first beta version of dynamic routing x first version of channels x resource path aliases with automatic redirects need a separate issue explaining this feature x data key order limit redirect x disable rss disable sitemaps disable pagination all hard-coded public routes e.g page are configurable inc homepage x add ui to upload+reload routes.yaml file there are some extensions to the dynamic routing behaviour that are known but not covered by this issue which include custom controllers and custom taxonomies_ please direct all questions discussion to the forum this issue will be used for collecting bugs use cases once the beta goes out
258259506,within the top requested features on the ghost feature wishlist this feature has been waiting for some love since i volunteer to help out with this features development brief overviewghost is one of the most customizable publishing platform for the general public out there and sports most of the major benefits of all its competitors however every now and then comes a blogger with a vision for a design and that vision requires complete customization of the fields on the core model objects think featured image subtitle featured link as replacement for image video content tweet facebook embed soundcloud and even more with the advent of apps this feature will most likely gain further support as the custom fields will be readily accessible just like any other fields on the core model objects it is most likely that apps will seek to alter the content and/or the structure of the database and to allow such behaviour will result in a maintenance mess hence it is important to allow such customization now with proper separation of concerns so that later features can use its power at the fullest feature details custom fields themselves custom fields should be implemented as fields that are available across all objects of a model with each instance/row having its own value for the said property each core model affected should have its own set of custom fields defined by the user without commonality with each other custom fields should be easily accessible from the block helpers used in the hbs templates custom fields should be easily usable by non-technical personnel so that the widest audience possible be able to use them core models affected iteration post iteration user gender sexual orientation age behance/deviantart/instagram/some social media etc can be seen as potential use cases other modelsi do not foresee the need for any extra custom fields on other models at the moment if anybody has a very good use case ill update this section accordingly proposed ui workflowi am no designer but here is what i came up with custom fields are to be accessible from the general settings general.hbs view! custom fields settings closed custom fields are to be added/removed dynamically and easily type of the field number text boolean can be specified for later retrieval and parsing by the model! custom fields settings expanded each post has access to the custom field menu through its settings menu! new story custom fields nav each post has its own value for the custom fields that can be specified in their custom field menu! new story custom fields menu scope of the changesafter my preliminary analysis of the codebase yesterday here is what i gathered ghost core/server/models/custom-field is to be created as a table representing the custom-fields for each other linked table see below core/server/models/custom-field-value is to be created as a table representing the values associated to each core model object which has the said custom fields see below core/server/models/post and core/server/models/user are to be modified to allow read mutation deletion of custom fields core/server/helpers/post_class and core/server/helpers/author are to be potentially modified to include the custom field helper core/server/helpers/custom helper has to be created to allow users to template using the custom block helper and output helper core/server/api api endpoints have to be modified accordingly to support modification of the custom field and custom field value models it is undetermined at the moment whether this should be done through the posts and users endpoints or through the settings endpoint quick db class diagram! class diagram ghost-admin general settings page app/controllers/general unclear whether modifications should be done on this file it does play a significant role however in contacting the server to update the settings under the general page general.hbs app/templates/settings/general.hbs modify the layout to include the new custom field settings will require the creation of a new component for the layout shown in the second mockup app/models/setting include a new field to validate on the model will require the creation of a new ember-data transform in order to support and validate the custom field editor page app/mixins/editor-base-controller may need modification to allow mutation and save of the custom fields app/components/gh-posts-settings-menu modify to include the design seen in screens and may require the creation of an extra components for dynamically generating the list of custom fields on screen app/models/post include a new field to validate on the model will require the creation of a new ember-data transform in order to support and validate the custom field values expected time investment activity estimate conservative estimate supplementary analysis h h implementation ghost h h testing ghost h h implementation ghost admin h h testing ghost admin h h total h h this is undoubtedly a large epic and would benefit from being undertaken by multiple individuals be broken down in smaller user stories drawbacks potential bottleneck on the customfield customfieldvalue table if accesses are done often with proper caching practice should not be problematic however requires changes to large portion of the ghost/ghost-admin software increases maintenance debt by increasing the codebase feature may not be necessary for a large portion of the target market but nevertheless eases a significant portion of the user base and facilitates future symbiosis of apps alternatives custom install on self-hosted version front-end with external database apps with ability to modify existing database structure and potentially requiring reboot for each new modification)it is an understatement to say that this list of alternatives is unsatisfying friends the future without custom fields is dire let us not allow ourselves to follow such a dark path
232736833,in the spirit of the exciting work being done on i thought i would take a stab at mocking up a design for publishing content in multiple languages the purpose of this is merely to mockup a workflow for a user to create multi-lingual content.below are the preliminary designs mess around with the xd link to see the design in action.adobe xd mockup concept! screen shot at you can see the that nothing has changed on the current admin interface alpha with the exception of an added translations box in the post settings.! screen shot at selecting that box the user would be taken to a settings screen just like the meta data box functionality where they can see all of the languages theyve added for this post as well as add additional languages.! screen shot at selecting a language in this example the user selects spanish they would be taken to a new/existing content post where you can create a custom permalink metadata tags and add a translator it might be better to have both the author and translator fields present across all translated posts.the approach ive taken here is akin to drupal s translation workflow which ties translated content nodes to the original node using the same node id in the database.in the stories section each post in a different language could appear as a separate content post with an additional language filter added at the top for sorting or alternatively a translated post could be linked with the original post and listed together with a marker/link to indicate that the current post has been translated in another language(s benefits to this approach easy to manage as a user intuitive streamlined with minimal clutter no need to mess with tags allows custom permalinks allows custom metadata could default to include html lang ability to reference the same post in different languages when theming flexibility some posts can be translated in multiple languages while others can remain in only one languagei would love to hear feedback on this and i hope to work on the implementation once a workflow has been decided on features and supporttaken from ive crossed out features that would immediately be solved with this workflow the following is a list of things we know we need to do make possible add support for publishing level blog language setting level post language customisable permalinks where english words are used set html lang add language output in json/ld non-latin chars in slugs non-latin chars in urls non-latin chars when uploading files non-latin chars handled by words and characters features of excerpt/content helpers non-latin chars in generated heading id attributes non-latin chars supported fully in editor customisable permalinks for tag author and page urls locale dates in themes moment.js language support different plural structures in the plurals helper extensible rules for what constitutes paragraphs and words in the excerpt and content helpers extensible rules for what constitutes paragraphs and words in the editor
225851753,in translatable ghosts frontend themes dates pagination subscribe formsno issue note this ghost commit is completed by a casper commit in translatable casper default theme complete automatic translation of ghosts frontend for site visitors themes etc to quickly deploy a site in a non-english language when the translation files are in place spanish full frontend now available for a start frontend language is switched by just changing the default english locale en e.g currentlocale es in file core/server/in.js this could be done in settings instead of file in future enhancements the corresponding translation file en.json es.json should be at core/server/translations/en.json etc or with later improvements probably at content/themes/mytheme/assets/translations/mytheme_en.json etc all frontend text strings theme pagination subscribe email forms included in translatable t handlebars helpers created like already existing handlebars helpers etc in files core/server/helpers/index.js and core/server/helpers/t.js easily readable original english text in templates for very simple translation translatable t handlebars helpers for templates of the frontend themes and apps frontend hbs templates in core/server themes in content/themes apps in content/apps usage examples in hbs templates t frontend older posts t mytheme get the latest posts delivered right to your inbox t mytheme proudly published with ghostlink ghostlink=
182737554,as with and were facing more and more issues regarding structured data in amp google wants to have a proper publisher.logo warning in xpx dimensions and an article.image error always!but its not only for amp we get the exact same errors and warnings for normal blog posts so we need a short term solution for lts which could be like this replace the default ghost blog logo with one that fits the dimensions put a text underneath the blog logo update in general settings that it has to fit the image dimensions use the blog cover as a default article.image whenever no post image is supplied if theres no blog cover use a default picture this needs to be defined maybe something neutral that refers to writing?)for a long term solution we need image-optimisation with that were able to resize the publisher.logo and offer the possibility to upload a default post image just like we do with the blog cover or logo in general settings.happy for other opinions here
178820424,the ghost editor is based on a year old split-screen markdown-editing concept which is now somewhat long-in-the-tooth modern wysiwyg editors like quip draft editorially or dropboxs paper have shown what can be achieved when you leave old-style wysiwyg behind and its awesome the key problem areas with the current editor are our markdown parser is buggy and limited markdown itself is limited split-screen doesnt provide a great ux especially on longer documents and restricts our screen space for adding editorial tools the current editor is not customisable or configurable .these issues are the fundamental problems that we are want to address by refreshing the editor however when we look closely at the existing editor theres a deeper set of problems we feel weve outground both markdown-only and the split-screen concepts markdown-only is limiting in terms of features and exclusive in terms of users the split-screen is flawed and takes up insane amounts of screen real-estate that could and should be used for more advanced editorial features the future is mobiledocmoving forward we want to build ourselves an editor for the future we want to support more advanced editorial features out-of-the-box whilst also enabling users to customise the editor to suit their specific use cases to do all this we need an underlying editor technology that will support us all the way form a basic editing surface through to customisations and collaboration.after reviewing the editor technologies that are around we settled on experimenting with an editor based on mobiledoc kit mobiledoc is not an editor itself it is a document format for article-style content mobiledoc-kit solves the fundamental problem of browser editors the fact that the html you interact with when editing in the browser is different to the html that will be output when your content is viewed mobiledoc also has a built-in concept of extensible cards or blocks of content each card has conceptual parts the stored content the interface for editing the content and the renderer for outputting the content this feature allows us to create a simple way to extend our editor with all manner of layout embed features.in addition to all this mobiledoc has an amazing team behind it its built to work for ember by people who are also part of the ember core team its being sponsored by bustle who are already using it in production were excited to be able to get involved and help champion this new technology as the way forward for web-based editors the initial plan building a whole new editor is going to take time and patience to get perfect thats part of the reason that were currently shipping weekly alphas the first iteration of the editor is coming in alpha and by the time we ship ghost were hoping to have the following features a single-pane wysiwyg editor space that supports all the features of mobiledoc which will include a toolbar unlike our existing editor mobiledoc covers basic text formatting like bold and italic making them available using keyboard shortcuts markdown syntax or the toolbar depending on your preference mobiledoc should provide everything you need for long-form editorial writing an html card which allows for embeds and writing full-html to format your text when mobiledoc is not enough this is the ultimate fall-back card and will allow you to add anything from fancy pull-quotes to fully interactive graphs to your posts an image card for easy uploading of one or more images this will also provide support for basic layout options captions and eventually more advanced features like slideshows the markdown card for those of you who still love markdown this will also be used to provide some backwards compatibility with content from the old editor.as well as these individual cards well be ensuring that all the peripheral behaviours work as well as possible including editing undo/redo behaviour keyboard shortcuts the toolbar dragging and dropping cards adding more markdown-style formatting command using notion-style commands to add cards and tonnes more details that youll only notice if theyre not right the initial version of this editor will be landing in alpha without backwards compatibility over the next few weeks we will be iterating on the editor adding more features polishing the ui and eventually implementing basic backwards compatibility.this first phase is largely an experiment attempting to lay foundations for advanced tools and customisations setting up the building blocks that will see us long into the future along side this we will be adding tooling around images for handling optimisations and serving different sizes the possibilities for advanced tooling are pretty much endless once weve got these basic pieces in place were also aiming for crazy levels of customisation with custom cards templates and other configurable options however we dont expect to ship these in full until after ghost
178156807,ghost is currently really quite hard to install and a pain to upgrade there is no standardised process for installing with users installing it on different platforms and in different scenarios supporting all of these custom installations is time-consuming and due to the varying environments the error messages can be widely different this is also a result of npms widely varied error handling).updating ghost is at the moment a similarly varied process a common feature request is for automatic updates however due to the complexities of a continuously running process in node installation errors and other such issues this is at the very least incredibly difficult and at most impossible to reduce the number of installation upgrade issues that occur and to enable implementation of automatic updates it is necessary to develop a standard for installing running and upgrading ghost considerations for a standardised install as there are so many environments that people choose to run ghost in it is going to be impossible to cover everyones use case with one install tool instead we should provide one single optimised recommended environment in which ghost runs well is easy to setup maintain deviations and flexibility should be possible but require the knowledge needed to successfully run maintain ghost outside of the recommended setup.the recommended environment will be something along the lines of:ubuntu lts nginx systemd mysql node.js v ssl varnish ghost cli overview cli is our shiny new tool for providing a standardised install upgrade process tada:.the new process for installing ghost in a production environment will be npm install g ghost-cli ghost install _(it already works give it a go!)_the installer will use various sub commands to check the environment is compatible ghost doctor and for setting up configuration ghost config there will also be ghost start and ghost stop commands the installer will be interactive with prompts for all required information such as your blog url meanwhile any configuration options which deviate from the standard install such as switching databases will be provided via command line flags.the install process will default to production mode and so will include requesting configuring your blog url well also be working towards adding as much tooling around helping to configure nginx systemd setup ssh and so on as is possible.well be adding one special install command ghost install local which will do a quick-install using sqlite and assume no url etc is needed thisll be a useful tool for theme and app developers to quickly get a development environment setup.upgrading ghost will be a single command ghost update long term we aim to turn this into a single click and eventually an automatic process.bonus by providing a cli tool we are also able to offload some of the burden of configuration management environment checks migrations etc which is currently in ghost core allowing us to streamline the startup time for ghost important for automatic updates wink:).---this issue provides just a high-level overview of the new cli tools for more details keep an eye on the issues over on the ghost-cli repo
172097672,support amp accelerated mobile pages for ghost for every blog post there will be an equivalent amp post the amp version of the post can be reached by adding amp to the end of the url e g the default template for amp is in the ghost core core/server/apps/amp/lib/views/amp.hbs and can be overwritten by adding a custom amp.hbs in your theme folder in content/themes .this pr includes also changes for structured data and json+ld as we will now output the height and width of images see prs and overview of included amp prs html version of the amp template amp routing and controller implements amp in apps and handles the amp route change the use of context to handle as array as a preparation for the upcoming amp post context update ghost_head to deal with the amp context and adds new helpers for the amp template amp_components adds amp script tags to head depending on html content amp_content transforms the regular html into amp html and strips out prohibited html tags bugfix code injection cant be used in ghost_head when in amp context audio tags get transformed now into amp html new helper amp_ghost_head to use instead of ghost_head
139374463,i am considering building this and it is already on the wishlist are the thoughts of the team things i should consider implications on themes etc do you guys think this should this be included in core or should it be implemented by theme builders or as a marketplace item...?i believe ideally this should be in the core as it is a way to deliver optimized content for mobile users feels pretty much like the front-end version of ghost to me but it obviously has many implications to theme builders and restricts a lot of what we can do i.e disqus still i feel its most likely worth it
65491545,this is a wip epic im still working out the steps needed to get from a-b and ill break it down into sub tasks/sub issues as and when in the meantime the goal is clear and documented here.---the frontend of ghost that is the server side code which renders a blog using the active theme has been somewhat unloved for a little while now it essentially consists of some hard coded routes in routes/frontend.js which in turn call the monolithic functions in controllers/frontend.js its time for this part of ghost to be refactored into something more elegant and importantly something more extensible.on the wiki youll find a new document titled channels which introduces and explains the concept of channels for the frontend in short channels are the abstracted concept of a list of posts i.e the homepage the tag archive the author archive or any other group of posts you could conceive of.and the very end of the document it talks about working to slowly remove hardcoded bits of the fontend and refactor it into configuration generation code before finally moving towards making channels a model api endpoint just like posts tags and users.this issue is the epic where well keep track of our progress towards achieving this new world order x refactor out the hardcoded slug keywords x convert sitemaps rpc pings to use events x move rss from frontend controller refactor to use events x move post-processing of author data out of the frontend controller x refactor frontend controller need to solve x dynamic routing for channels x pagination when in channel meta data for channels sitemap for channels improve the channels apimaybe later add a channel registration mechanism that works whilst ghost is running support offset rather than page in the api rss feeds for each channel linked in that channel post urls next/prev post when in channel updates aug the current state of channels is that it the functionality is largely refactored and in place but can only be accessed by modifying the core file channels-config.js this is because although the basics are working advanced behaviour of ghost isnt yet properly linked to channels.examples of missing pieces some listed above are sitemaps meta data rss feed urls only next/prev post when in a channel deep customisation e.g disabling rss feedsthere is also some pure-refactoring that needs to be done:e.g moving channels to a proper home moving non-channel pieces from controllers/frontend.js to a proper home strengthening the implementation to make channels more of a first class object better/clearer default configuration proper use of express exposing channels without core modificationbasically we need to iron out a few more of the major pieces and then expose this config short term were going to start publishing blog posts on how to use the functionality that is there by hacking core
48808362,this issue replaces at least for now issues and as the one true place to discuss all of our image processing needs in ghost and the possible solutions.please note that this issue is not about storing or managing uploaded images only about processing them on the way to the server image processing featureswhen it comes to uploading images in ghost there are a few issues we need to be able to resolve cropping an image to a square see for full details removing exif orientation data see for full details simple rotations so that we get the right orientation of an image optimising an image for display resizing enormous digital camera photos to a sensible file and display size see generating different sizes of an uploaded image for use in different situations see multiple image sizes (#multiple-image-sizes below for more detail multiple image sizesthere are a few ideas for ghost features that have been floating around forever that would require us to be able to generate multiple sizes of any one image serving different sized images to different devices so that a blog is more optmised for mobile providing themes various image sizes to display in different places i.e featured image might be small on the index and a huge cover image on the post page which would be accessible by doing something like image size=small allowing themes or apps to define the image sizes they use and ghost generating them any sort of image management app would need a thumbnail the current state of image processingghost doesnt currently have any form of image processing built in because we havent yet found a good solution for doing this pretty much all node libraries for image processing have imagemagick as a dependency and that is not a viable solution for ghost due it it being a c program thats ridiculously hard to install this leaves us with a few alternative options client do the processing on the client side purejs find a pure js module for image processing compiler compile imagemagick using something like emscripten node-pre-gyp create or change an existing node module which wraps imagemagick to use node-pre-gyp which is the same thing we use to install sqlite api use a rd party api for image processing other some other solution we havent thought of yet.several of these solutions have been discussed or covered in the comments on and so they are worth a read what we know so far client it may be possible to do simple cropping or resizing using the canvas element and/or file api but this wont work for any sort of regeneration of sizes so it wont present a full solution javascript-load-image mentioned here is probably worth looking into though purejs lwip is the only one i knew of mentioned in but it turns out even that is actually largely written in c/c is there really not a single purejs one out there this needs investigating compilers there was quite an extensive discussion on modules that we could potentially compile into js and how on this is worth further investigation as we might be a few small steps from a solution here node-pre-gyp if we could identify one of the imagemagick wrapper projects which has the features we need and might be active and willing to accept a pr this might be a viable option node-pre-gyp has taken pretty much all of the pain out of sqlite installs still as this is nowhere near as important a dependency as sqlite i wonder if it will resolve the issue quite enough to be worth the problems some people will still have api there are a few that have been mentioned although i cant find the references now worth investigating but this is likely to require keys and other complexities other anyone got any bright ideas?---in summary theres quite a bit of research and investigation to be done to come up with a couple of potential solutions for image processing in ghost and weigh up their pros and cons i dont think there is going to be an obvious winner but we need to gather together a clear picture of whats available to us so we can make a decision the key thing is that we only need crop rotate resize exif modification some optimisation tools we arent trying to detect faces or anything!anyone and everyone is welcome to jump in on this with any solution they can come up with im not looking for one person to do all the research but rather for people to volunteer their suggestions i know i know only haha
40412796,project description ghost is currently pretty much uk-based english-language only and has barely any features to account for timezones locales languages alphabets keyboard layouts or anything else that isnt utc/english in either the admin or in themes even the usa folks luck out sorry all this is set to change with full support for multiple locales and languages across the admin and your blog posts throughout the ghost github support for all of these sorts of features is referred to as in internationalisation).---currently ghost effectively doesnt work properly unless youre writing in english or something very similar throughout the application from the ember admin to the api and even down to themes there are things missing which make it hard to use ghost if you arent english speaking.this issue is intended as a placeholder to keep track of all the different places where we know we need to add in support so that it becomes possible for anyone to publish content comfortably in their own language and locale.in for ghost falls into broad categories publish content in your language/localewe need to make it possible for anyone to create a blog and publish content which is in their language this includes extending theme helpers adding support for non latin-standard chars in urls and other files and many other things use ghost in your language/localemuch less important it would be great for our users if they could have the admin ui appear in their language with a tailored layout and specific fonts features and supportthe following is a list of things we know we need to do make possible add support for publishing level blog language setting level post language customisable permalinks where english words are used set html lang add language output in json/ld non-latin chars in slugs non-latin chars in urls non-latin chars when uploading files non-latin chars handled by words and characters features of excerpt/content helpers non-latin chars in generated heading id attributes non-latin chars supported fully in editor customisable permalinks for tag author and page urls locale dates in themes moment.js language support different plural structures in the plurals helper extensible rules for what constitutes paragraphs and words in the excerpt and content helpers extensible rules for what constitutes paragraphs and words in the editor admin ui translate the admin ui locale dates when entering published at date register different fonts for use in the admin interface and specifically the editor extend the admin interface with layout tweaks for different languages install language packs which provide the translations and layout tweaks non-latin chars handled by word count and counters on bio/description fields ability to include extra character sets in admin via language packs in and appsnot all features and support for other languages will exist in core different writing systems require very different layouts and as such it should be expected that if your language is significantly different to english that an app may be required to make ghost work for you.the advantage of splitting functionality this way is that we dont have to design one ui that works for all languages and writing systems furthermore we dont have to bloat the core of ghost with features that will only ever be used by one specific group language packs which add translations for the ghost admin ui could also add layout tweaks better fonts and other modifications to make ghost work just as well for other languages as it does for english
